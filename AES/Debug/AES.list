
AES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  080043f8  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  20000070  08004460  00006070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e0  08004460  000061e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009746  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d07  00000000  00000000  0000f7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  000114f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bc8  00000000  00000000  000124d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002178a  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000bd90  00000000  00000000  00034822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d19ea  00000000  00000000  000405b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00111f9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000488c  00000000  00000000  00111fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  0011686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080040a0 	.word	0x080040a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080040a0 	.word	0x080040a0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <add_round_key>:
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};


// Fonction AddRoundKey : applique XOR entre state et la clé de tour
void add_round_key(uint8_t *state, const uint8_t *roundKey) {
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e010      	b.n	8000252 <add_round_key+0x32>
        state[i] ^= roundKey[i];  // XOR chaque octet du bloc avec la clé de tour
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	7819      	ldrb	r1, [r3, #0]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	4413      	add	r3, r2
 800023e:	781a      	ldrb	r2, [r3, #0]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	4403      	add	r3, r0
 8000246:	404a      	eors	r2, r1
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3301      	adds	r3, #1
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	ddeb      	ble.n	8000230 <add_round_key+0x10>
    }
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <print_state>:

// Fonction pour afficher le contenu du bloc AES
void print_state(const uint8_t *state) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	e00a      	b.n	800028c <print_state+0x24>
        printf("%02X ", state[i]);  // Affiche chaque octet en hexadécimal
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4413      	add	r3, r2
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4619      	mov	r1, r3
 8000280:	4807      	ldr	r0, [pc, #28]	@ (80002a0 <print_state+0x38>)
 8000282:	f002 fff9 	bl	8003278 <iprintf>
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	ddf1      	ble.n	8000276 <print_state+0xe>
    }
    printf("\n");
 8000292:	200a      	movs	r0, #10
 8000294:	f003 f802 	bl	800329c <putchar>
}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	080040b8 	.word	0x080040b8

080002a4 <sub_bytes>:

//--------------------------------------------------------------------------------------------------------------------------------

// Fonction SubBytes : remplace chaque octet par sa valeur dans la S-Box
void sub_bytes(uint8_t *state) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e00d      	b.n	80002ce <sub_bytes+0x2a>
        state[i] = sbox[state[i]];
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <sub_bytes+0x40>)
 80002c4:	5c52      	ldrb	r2, [r2, r1]
 80002c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b0f      	cmp	r3, #15
 80002d2:	ddee      	ble.n	80002b2 <sub_bytes+0xe>
    }
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	08004234 	.word	0x08004234

080002e8 <shift_rows>:

//--------------------------------------------------------------------------------------------------------------------------------

// Fonction ShiftRows : décale les lignes de la matrice AES
void shift_rows(uint8_t *state) {
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    uint8_t temp;

    // Décalage de la ligne 1 (1 octet à gauche)
    temp = state[1];
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	785b      	ldrb	r3, [r3, #1]
 80002f4:	73fb      	strb	r3, [r7, #15]
    state[1] = state[5];
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	7952      	ldrb	r2, [r2, #5]
 80002fe:	701a      	strb	r2, [r3, #0]
    state[5] = state[9];
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3305      	adds	r3, #5
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	7a52      	ldrb	r2, [r2, #9]
 8000308:	701a      	strb	r2, [r3, #0]
    state[9] = state[13];
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3309      	adds	r3, #9
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7b52      	ldrb	r2, [r2, #13]
 8000312:	701a      	strb	r2, [r3, #0]
    state[13] = temp;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	330d      	adds	r3, #13
 8000318:	7bfa      	ldrb	r2, [r7, #15]
 800031a:	701a      	strb	r2, [r3, #0]

    // Décalage de la ligne 2 (2 octets à gauche)
    temp = state[2];
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	789b      	ldrb	r3, [r3, #2]
 8000320:	73fb      	strb	r3, [r7, #15]
    state[2] = state[10];
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3302      	adds	r3, #2
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	7a92      	ldrb	r2, [r2, #10]
 800032a:	701a      	strb	r2, [r3, #0]
    state[10] = temp;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	330a      	adds	r3, #10
 8000330:	7bfa      	ldrb	r2, [r7, #15]
 8000332:	701a      	strb	r2, [r3, #0]

    temp = state[6];
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	799b      	ldrb	r3, [r3, #6]
 8000338:	73fb      	strb	r3, [r7, #15]
    state[6] = state[14];
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3306      	adds	r3, #6
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	7b92      	ldrb	r2, [r2, #14]
 8000342:	701a      	strb	r2, [r3, #0]
    state[14] = temp;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	330e      	adds	r3, #14
 8000348:	7bfa      	ldrb	r2, [r7, #15]
 800034a:	701a      	strb	r2, [r3, #0]

    // Décalage de la ligne 3 (3 octets à gauche)
    temp = state[3];
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	73fb      	strb	r3, [r7, #15]
    state[3] = state[15];
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3303      	adds	r3, #3
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	7bd2      	ldrb	r2, [r2, #15]
 800035a:	701a      	strb	r2, [r3, #0]
    state[15] = state[11];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	330f      	adds	r3, #15
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	7ad2      	ldrb	r2, [r2, #11]
 8000364:	701a      	strb	r2, [r3, #0]
    state[11] = state[7];
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	330b      	adds	r3, #11
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	79d2      	ldrb	r2, [r2, #7]
 800036e:	701a      	strb	r2, [r3, #0]
    state[7] = temp;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3307      	adds	r3, #7
 8000374:	7bfa      	ldrb	r2, [r7, #15]
 8000376:	701a      	strb	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <gmul>:

//----------------------------------------------------------------------------------------------------------------------------------
typedef uint8_t AES_BYTE;

/* Multiplication dans GF(2^8) avec le polynôme irréductible AES (x^8 + x^4 + x^3 + x + 1) */
AES_BYTE gmul(AES_BYTE a, AES_BYTE b) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	460a      	mov	r2, r1
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	4613      	mov	r3, r2
 8000392:	71bb      	strb	r3, [r7, #6]
    AES_BYTE p = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]
    while (a && b) {
 8000398:	e01b      	b.n	80003d2 <gmul+0x4e>
        if (b & 1) p ^= a;
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d003      	beq.n	80003ac <gmul+0x28>
 80003a4:	7bfa      	ldrb	r2, [r7, #15]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4053      	eors	r3, r2
 80003aa:	73fb      	strb	r3, [r7, #15]
        if (a & 0x80) {
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	da08      	bge.n	80003c6 <gmul+0x42>
            a = (a << 1) ^ 0x1b;
 80003b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	f083 031b 	eor.w	r3, r3, #27
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	71fb      	strb	r3, [r7, #7]
 80003c4:	e002      	b.n	80003cc <gmul+0x48>
        } else {
            a <<= 1;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	71fb      	strb	r3, [r7, #7]
        }
        b >>= 1;
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	085b      	lsrs	r3, r3, #1
 80003d0:	71bb      	strb	r3, [r7, #6]
    while (a && b) {
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <gmul+0x5a>
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1dd      	bne.n	800039a <gmul+0x16>
    }
    return p;
 80003de:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <mixColumn>:

void mixColumn(AES_BYTE *col) {
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    AES_BYTE t[4];
    t[0] = gmul(col[0], 0x02) ^ gmul(col[1], 0x03) ^ col[2] ^ col[3];
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ffc2 	bl	8000384 <gmul>
 8000400:	4603      	mov	r3, r0
 8000402:	461c      	mov	r4, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3301      	adds	r3, #1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2103      	movs	r1, #3
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffb9 	bl	8000384 <gmul>
 8000412:	4603      	mov	r3, r0
 8000414:	4063      	eors	r3, r4
 8000416:	b2da      	uxtb	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3302      	adds	r3, #2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	4053      	eors	r3, r2
 8000420:	b2da      	uxtb	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3303      	adds	r3, #3
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4053      	eors	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	723b      	strb	r3, [r7, #8]
    t[1] = col[0] ^ gmul(col[1], 0x02) ^ gmul(col[2], 0x03) ^ col[3];
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781c      	ldrb	r4, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3301      	adds	r3, #1
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffa2 	bl	8000384 <gmul>
 8000440:	4603      	mov	r3, r0
 8000442:	4063      	eors	r3, r4
 8000444:	b2dc      	uxtb	r4, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3302      	adds	r3, #2
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2103      	movs	r1, #3
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff98 	bl	8000384 <gmul>
 8000454:	4603      	mov	r3, r0
 8000456:	4063      	eors	r3, r4
 8000458:	b2da      	uxtb	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3303      	adds	r3, #3
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4053      	eors	r3, r2
 8000462:	b2db      	uxtb	r3, r3
 8000464:	727b      	strb	r3, [r7, #9]
    t[2] = col[0] ^ col[1] ^ gmul(col[2], 0x02) ^ gmul(col[3], 0x03);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3301      	adds	r3, #1
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4053      	eors	r3, r2
 8000472:	b2dc      	uxtb	r4, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3302      	adds	r3, #2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff81 	bl	8000384 <gmul>
 8000482:	4603      	mov	r3, r0
 8000484:	4063      	eors	r3, r4
 8000486:	b2dc      	uxtb	r4, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3303      	adds	r3, #3
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2103      	movs	r1, #3
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff77 	bl	8000384 <gmul>
 8000496:	4603      	mov	r3, r0
 8000498:	4063      	eors	r3, r4
 800049a:	b2db      	uxtb	r3, r3
 800049c:	72bb      	strb	r3, [r7, #10]
    t[3] = gmul(col[0], 0x03) ^ col[1] ^ col[2] ^ gmul(col[3], 0x02);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2103      	movs	r1, #3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff6d 	bl	8000384 <gmul>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3301      	adds	r3, #1
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4053      	eors	r3, r2
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3302      	adds	r3, #2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4053      	eors	r3, r2
 80004c0:	b2dc      	uxtb	r4, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3303      	adds	r3, #3
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2102      	movs	r1, #2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff5a 	bl	8000384 <gmul>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4063      	eors	r3, r4
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	72fb      	strb	r3, [r7, #11]

    for (int i = 0; i < 4; i++) {
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	e00b      	b.n	80004f6 <mixColumn+0x10a>
        col[i] = t[i];
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4413      	add	r3, r2
 80004e4:	f107 0108 	add.w	r1, r7, #8
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	440a      	add	r2, r1
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	ddf0      	ble.n	80004de <mixColumn+0xf2>
    }
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bd90      	pop	{r4, r7, pc}

08000506 <mixColumns>:

void mixColumns(AES_BYTE *state) {
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e00a      	b.n	800052a <mixColumns+0x24>
        mixColumn(state + i * 4);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff64 	bl	80003ec <mixColumn>
    for (int i = 0; i < 4; i++) {
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3301      	adds	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2b03      	cmp	r3, #3
 800052e:	ddf1      	ble.n	8000514 <mixColumns+0xe>
    }
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <sbox_substitution>:
//-----------------------------------------------------------------------------------------------------------------------



uint8_t sbox_substitution(uint8_t byte){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	return sbox[byte];
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a03      	ldr	r2, [pc, #12]	@ (8000558 <sbox_substitution+0x1c>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	08004234 	.word	0x08004234

0800055c <XOR_bytes>:


uint8_t XOR_bytes(const uint8_t byte1, const uint8_t byte2){
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	return byte1^byte2;
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	4053      	eors	r3, r2
 8000572:	b2db      	uxtb	r3, r3
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <XOR_words>:


void XOR_words(const uint8_t * word1, const uint8_t * word2, uint8_t * ret){
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < WORD_LENGTH; ++i){
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e011      	b.n	80005b6 <XOR_words+0x36>
		ret[i] = XOR_bytes(word1[i],word2[i]);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4413      	add	r3, r2
 80005a0:	7819      	ldrb	r1, [r3, #0]
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	18d4      	adds	r4, r2, r3
 80005a8:	f7ff ffd8 	bl	800055c <XOR_bytes>
 80005ac:	4603      	mov	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < WORD_LENGTH; ++i){
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	ddea      	ble.n	8000592 <XOR_words+0x12>
	}
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd90      	pop	{r4, r7, pc}
	...

080005c8 <get_round_constant>:

uint8_t get_round_constant(const int n){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	const uint8_t round_constants[AES_128_ROUND_NUMBER] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
 80005d0:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <get_round_constant+0x30>)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d8:	c303      	stmia	r3!, {r0, r1}
 80005da:	801a      	strh	r2, [r3, #0]
 80005dc:	3302      	adds	r3, #2
 80005de:	0c12      	lsrs	r2, r2, #16
 80005e0:	701a      	strb	r2, [r3, #0]
	return round_constants[n];
 80005e2:	f107 020c 	add.w	r2, r7, #12
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	371c      	adds	r7, #28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	080040c0 	.word	0x080040c0

080005fc <g_function>:


void g_function(const uint8_t * word, const int round, uint8_t * ret){
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]

	//shift left
	ret[0] = word[1];
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	701a      	strb	r2, [r3, #0]
	ret[1] = word[2];
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	1c9a      	adds	r2, r3, #2
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	701a      	strb	r2, [r3, #0]
	ret[2] = word[3];
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	1cda      	adds	r2, r3, #3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3302      	adds	r3, #2
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	ret[3] = word[0];
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3303      	adds	r3, #3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	701a      	strb	r2, [r3, #0]

	//sbox substitution
	ret[0] = sbox_substitution(ret[0]);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff7f 	bl	800053c <sbox_substitution>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	701a      	strb	r2, [r3, #0]
	ret[1] = sbox_substitution(ret[1]);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	1c5c      	adds	r4, r3, #1
 8000650:	4610      	mov	r0, r2
 8000652:	f7ff ff73 	bl	800053c <sbox_substitution>
 8000656:	4603      	mov	r3, r0
 8000658:	7023      	strb	r3, [r4, #0]
	ret[2] = sbox_substitution(ret[2]);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3302      	adds	r3, #2
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c9c      	adds	r4, r3, #2
 8000664:	4610      	mov	r0, r2
 8000666:	f7ff ff69 	bl	800053c <sbox_substitution>
 800066a:	4603      	mov	r3, r0
 800066c:	7023      	strb	r3, [r4, #0]
	ret[3] = sbox_substitution(ret[3]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3303      	adds	r3, #3
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1cdc      	adds	r4, r3, #3
 8000678:	4610      	mov	r0, r2
 800067a:	f7ff ff5f 	bl	800053c <sbox_substitution>
 800067e:	4603      	mov	r3, r0
 8000680:	7023      	strb	r3, [r4, #0]

	//round constant XOR
	const uint8_t round_constant = get_round_constant(round);
 8000682:	68b8      	ldr	r0, [r7, #8]
 8000684:	f7ff ffa0 	bl	80005c8 <get_round_constant>
 8000688:	4603      	mov	r3, r0
 800068a:	75fb      	strb	r3, [r7, #23]
	const uint8_t round_constant_word[WORD_LENGTH] = { round_constant, 0x00, 0x00, 0x00};
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	743b      	strb	r3, [r7, #16]
 8000690:	2300      	movs	r3, #0
 8000692:	747b      	strb	r3, [r7, #17]
 8000694:	2300      	movs	r3, #0
 8000696:	74bb      	strb	r3, [r7, #18]
 8000698:	2300      	movs	r3, #0
 800069a:	74fb      	strb	r3, [r7, #19]

	XOR_words(ret,round_constant_word, ret);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff6b 	bl	8000580 <XOR_words>

}
 80006aa:	bf00      	nop
 80006ac:	371c      	adds	r7, #28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}

080006b2 <key_expansion_by_round>:



void key_expansion_by_round(const uint8_t * key , const int round, uint8_t * ret_key){
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b09e      	sub	sp, #120	@ 0x78
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]


	//select the 4 words from the key
	const uint8_t word0[WORD_LENGTH] = {key[0],  key[1],  key[2],  key[3]};
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3301      	adds	r3, #1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3302      	adds	r3, #2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3303      	adds	r3, #3
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	const uint8_t word1[WORD_LENGTH] = {key[4],  key[5],  key[6],  key[7]};
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3304      	adds	r3, #4
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3305      	adds	r3, #5
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3306      	adds	r3, #6
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3307      	adds	r3, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	const uint8_t word2[WORD_LENGTH] = {key[8],  key[9],  key[10], key[11]};
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3308      	adds	r3, #8
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3309      	adds	r3, #9
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	330a      	adds	r3, #10
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	330b      	adds	r3, #11
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	const uint8_t word3[WORD_LENGTH] = {key[12], key[13], key[14], key[15]};
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	330c      	adds	r3, #12
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	330d      	adds	r3, #13
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	330e      	adds	r3, #14
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	330f      	adds	r3, #15
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	uint8_t word5[WORD_LENGTH];
	uint8_t word6[WORD_LENGTH];
	uint8_t word7[WORD_LENGTH];

	uint8_t g_function_word[WORD_LENGTH];
	g_function(word3,round, g_function_word);
 800075c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000760:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff48 	bl	80005fc <g_function>

	XOR_words(g_function_word , word0, word4);
 800076c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000770:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000774:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff01 	bl	8000580 <XOR_words>
	XOR_words(word4, word1, word5);
 800077e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8000782:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000786:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fef8 	bl	8000580 <XOR_words>
	XOR_words(word5, word2, word6);
 8000790:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000794:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000798:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff feef 	bl	8000580 <XOR_words>
	XOR_words(word6, word3, word7);
 80007a2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80007a6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80007aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee6 	bl	8000580 <XOR_words>

	//build key
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2240      	movs	r2, #64	@ 0x40
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 feab 	bl	8003518 <memset>
 80007c2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80007c6:	753b      	strb	r3, [r7, #20]
 80007c8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80007cc:	757b      	strb	r3, [r7, #21]
 80007ce:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80007d2:	75bb      	strb	r3, [r7, #22]
 80007d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80007d8:	75fb      	strb	r3, [r7, #23]
										  word5[0], word5[1], word5[2], word5[3],
 80007da:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007de:	763b      	strb	r3, [r7, #24]
										  word5[0], word5[1], word5[2], word5[3],
 80007e0:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007e4:	767b      	strb	r3, [r7, #25]
										  word5[0], word5[1], word5[2], word5[3],
 80007e6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007ea:	76bb      	strb	r3, [r7, #26]
										  word5[0], word5[1], word5[2], word5[3],
 80007ec:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007f0:	76fb      	strb	r3, [r7, #27]
										  word6[0], word6[1], word6[2], word6[3],
 80007f2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007f6:	773b      	strb	r3, [r7, #28]
										  word6[0], word6[1], word6[2], word6[3],
 80007f8:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 80007fc:	777b      	strb	r3, [r7, #29]
										  word6[0], word6[1], word6[2], word6[3],
 80007fe:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 8000802:	77bb      	strb	r3, [r7, #30]
										  word6[0], word6[1], word6[2], word6[3],
 8000804:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 8000808:	77fb      	strb	r3, [r7, #31]
										  word7[0], word7[1], word7[2], word7[3]};
 800080a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 800080e:	f887 3020 	strb.w	r3, [r7, #32]
										  word7[0], word7[1], word7[2], word7[3]};
 8000812:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 8000816:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
										  word7[0], word7[1], word7[2], word7[3]};
 800081a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 800081e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
										  word7[0], word7[1], word7[2], word7[3]};
 8000822:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
	uint8_t temp_key[16 * WORD_LENGTH] = {word4[0], word4[1], word4[2], word4[3],
 8000826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	//change return key
	memcpy(ret_key, temp_key, AES_BLOCK_SIZE);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2210      	movs	r2, #16
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f002 feeb 	bl	800360e <memcpy>
}
 8000838:	bf00      	nop
 800083a:	3778      	adds	r7, #120	@ 0x78
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <AES_key_schedule>:

void AES_key_schedule(const uint8_t * key, uint8_t full_key_expansion[AES_128_ROUND_NUMBER][AES_BLOCK_SIZE * 16]){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	const int rounds = AES_128_ROUND_NUMBER - 1;
 800084a:	230a      	movs	r3, #10
 800084c:	613b      	str	r3, [r7, #16]

	memcpy(full_key_expansion[0], key, AES_BLOCK_SIZE); //round 0 key is initial key
 800084e:	2210      	movs	r2, #16
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f002 fedb 	bl	800360e <memcpy>

	//build other keys
	for(int i = 0; i < rounds; ++i){
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e011      	b.n	8000882 <AES_key_schedule+0x42>
		const int n = i + 1;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
		key_expansion_by_round(full_key_expansion[i], n, full_key_expansion[n]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	18d0      	adds	r0, r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	461a      	mov	r2, r3
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	f7ff ff1b 	bl	80006b2 <key_expansion_by_round>
	for(int i = 0; i < rounds; ++i){
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbe9      	blt.n	800085e <AES_key_schedule+0x1e>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <print_key>:

void print_key(uint8_t * key){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < AES_BLOCK_SIZE; ++i){
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e00a      	b.n	80008b8 <print_key+0x24>
		printf("%02X ", key[i]);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <print_key+0x38>)
 80008ae:	f002 fce3 	bl	8003278 <iprintf>
	for(int i = 0; i < AES_BLOCK_SIZE; ++i){
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	ddf1      	ble.n	80008a2 <print_key+0xe>
	}
	printf("\n");
 80008be:	200a      	movs	r0, #10
 80008c0:	f002 fcec 	bl	800329c <putchar>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	080040b8 	.word	0x080040b8

080008d0 <aes_encrypt>:

//------------------------------------------------------------------------------------------------------------------------------

void aes_encrypt(uint8_t *state, uint8_t *key) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	f5ad 6d31 	sub.w	sp, sp, #2832	@ 0xb10
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80008dc:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80008e0:	6018      	str	r0, [r3, #0]
 80008e2:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80008e6:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 80008ea:	6019      	str	r1, [r3, #0]
	uint8_t full_key_expansion[AES_128_ROUND_NUMBER][AES_BLOCK_SIZE * 16];//uniquement pour AES-128

	AES_key_schedule(key, full_key_expansion);
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80008f4:	f5a3 6331 	sub.w	r3, r3, #2832	@ 0xb10
 80008f8:	4611      	mov	r1, r2
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	f7ff ffa0 	bl	8000840 <AES_key_schedule>
	for(int i = 0; i < AES_128_ROUND_NUMBER; ++i){
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 3b0c 	str.w	r3, [r7, #2828]	@ 0xb0c
 8000906:	e012      	b.n	800092e <aes_encrypt+0x5e>

		printf("Round %0X : ",i);
 8000908:	f8d7 1b0c 	ldr.w	r1, [r7, #2828]	@ 0xb0c
 800090c:	4856      	ldr	r0, [pc, #344]	@ (8000a68 <aes_encrypt+0x198>)
 800090e:	f002 fcb3 	bl	8003278 <iprintf>
		print_key(full_key_expansion[i]);
 8000912:	f107 0208 	add.w	r2, r7, #8
 8000916:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	4413      	add	r3, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffb8 	bl	8000894 <print_key>
	for(int i = 0; i < AES_128_ROUND_NUMBER; ++i){
 8000924:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8000928:	3301      	adds	r3, #1
 800092a:	f8c7 3b0c 	str.w	r3, [r7, #2828]	@ 0xb0c
 800092e:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8000932:	2b0a      	cmp	r3, #10
 8000934:	dde8      	ble.n	8000908 <aes_encrypt+0x38>
	}

    printf("\n--- Début de l'encryption AES ---\n");
 8000936:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <aes_encrypt+0x19c>)
 8000938:	f002 fd0e 	bl	8003358 <puts>
    printf("État initial:\n");
 800093c:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <aes_encrypt+0x1a0>)
 800093e:	f002 fd0b 	bl	8003358 <puts>
    print_state(state);
 8000942:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8000946:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f7ff fc8c 	bl	8000268 <print_state>

    add_round_key(state, full_key_expansion[0]);
 8000950:	f107 0208 	add.w	r2, r7, #8
 8000954:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8000958:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 800095c:	4611      	mov	r1, r2
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	f7ff fc5e 	bl	8000220 <add_round_key>
    printf("Après AddRoundKey (Round 0):\n");
 8000964:	4843      	ldr	r0, [pc, #268]	@ (8000a74 <aes_encrypt+0x1a4>)
 8000966:	f002 fcf7 	bl	8003358 <puts>
    print_state(state);
 800096a:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800096e:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	f7ff fc78 	bl	8000268 <print_state>

    for (int round = 1; round < AES_128_ROUND_NUMBER; round++) {
 8000978:	2301      	movs	r3, #1
 800097a:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 800097e:	e066      	b.n	8000a4e <aes_encrypt+0x17e>
        printf("\n--- Début du Round %d ---\n", round);
 8000980:	f8d7 1b08 	ldr.w	r1, [r7, #2824]	@ 0xb08
 8000984:	483c      	ldr	r0, [pc, #240]	@ (8000a78 <aes_encrypt+0x1a8>)
 8000986:	f002 fc77 	bl	8003278 <iprintf>
        sub_bytes(state);
 800098a:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800098e:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	f7ff fc86 	bl	80002a4 <sub_bytes>
        printf("Après SubBytes:\n");
 8000998:	4838      	ldr	r0, [pc, #224]	@ (8000a7c <aes_encrypt+0x1ac>)
 800099a:	f002 fcdd 	bl	8003358 <puts>
        print_state(state);
 800099e:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80009a2:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	f7ff fc5e 	bl	8000268 <print_state>

        shift_rows(state);
 80009ac:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80009b0:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f7ff fc97 	bl	80002e8 <shift_rows>
        printf("Après ShiftRows:\n");
 80009ba:	4831      	ldr	r0, [pc, #196]	@ (8000a80 <aes_encrypt+0x1b0>)
 80009bc:	f002 fccc 	bl	8003358 <puts>
        print_state(state);
 80009c0:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80009c4:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f7ff fc4d 	bl	8000268 <print_state>

        if (round < AES_128_ROUND_NUMBER - 1) {
 80009ce:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 80009d2:	2b09      	cmp	r3, #9
 80009d4:	dc10      	bgt.n	80009f8 <aes_encrypt+0x128>
            mixColumns(state);
 80009d6:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80009da:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f7ff fd91 	bl	8000506 <mixColumns>
            printf("Après MixColumns:\n");
 80009e4:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <aes_encrypt+0x1b4>)
 80009e6:	f002 fcb7 	bl	8003358 <puts>
            print_state(state);
 80009ea:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80009ee:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	f7ff fc38 	bl	8000268 <print_state>
        }
        printf("Round key used:\n");
 80009f8:	4823      	ldr	r0, [pc, #140]	@ (8000a88 <aes_encrypt+0x1b8>)
 80009fa:	f002 fcad 	bl	8003358 <puts>
        print_state(full_key_expansion[round]);
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	4413      	add	r3, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc2c 	bl	8000268 <print_state>

        add_round_key(state, full_key_expansion[round]);
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	441a      	add	r2, r3
 8000a1c:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8000a20:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 8000a24:	4611      	mov	r1, r2
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	f7ff fbfa 	bl	8000220 <add_round_key>
        printf("Après AddRoundKey (Round %d):\n", round);
 8000a2c:	f8d7 1b08 	ldr.w	r1, [r7, #2824]	@ 0xb08
 8000a30:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <aes_encrypt+0x1bc>)
 8000a32:	f002 fc21 	bl	8003278 <iprintf>
        print_state(state);
 8000a36:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8000a3a:	f6a3 330c 	subw	r3, r3, #2828	@ 0xb0c
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	f7ff fc12 	bl	8000268 <print_state>
    for (int round = 1; round < AES_128_ROUND_NUMBER; round++) {
 8000a44:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8000a48:	3301      	adds	r3, #1
 8000a4a:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 8000a4e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	dd94      	ble.n	8000980 <aes_encrypt+0xb0>
    }

    printf("\n--- Fin de l'encryption AES ---\n");
 8000a56:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <aes_encrypt+0x1c0>)
 8000a58:	f002 fc7e 	bl	8003358 <puts>
}
 8000a5c:	bf00      	nop
 8000a5e:	f507 6731 	add.w	r7, r7, #2832	@ 0xb10
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	080040cc 	.word	0x080040cc
 8000a6c:	080040dc 	.word	0x080040dc
 8000a70:	08004100 	.word	0x08004100
 8000a74:	08004110 	.word	0x08004110
 8000a78:	08004130 	.word	0x08004130
 8000a7c:	08004150 	.word	0x08004150
 8000a80:	08004164 	.word	0x08004164
 8000a84:	08004178 	.word	0x08004178
 8000a88:	0800418c 	.word	0x0800418c
 8000a8c:	0800419c 	.word	0x0800419c
 8000a90:	080041bc 	.word	0x080041bc

08000a94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000aac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000abc:	e000      	b.n	8000ac0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000abe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000aca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000af0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("hello\n");
 8000b1a:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <main+0x4c>)
 8000b1c:	f002 fc1c 	bl	8003358 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fa6e 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f822 	bl	8000b6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b28:	f000 f878 	bl	8000c1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f894 	bl	8000c58 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // État initial (message clair de 16 octets)
  uint8_t state[AES_BLOCK_SIZE] = { 0x32, 0x43, 0xf6, 0xa8,
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <main+0x50>)
 8000b32:	f107 0410 	add.w	r4, r7, #16
 8000b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									0x88, 0x5a, 0x30, 0x8d,
									0x31, 0x31, 0x98, 0xa2,
									0xe0, 0x37, 0x07, 0x34 };

  // Clé de tour (Cipher Key)
  uint8_t roundKey[AES_BLOCK_SIZE] = { 0x2b, 0x7e, 0x15, 0x16,
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <main+0x54>)
 8000b3e:	463c      	mov	r4, r7
 8000b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									   0x28, 0xae, 0xd2, 0xa6,
									   0xab, 0xf7, 0x15, 0x88,
									   0x09, 0xcf, 0x4f, 0x3c };

  aes_encrypt(state, roundKey);
 8000b46:	463a      	mov	r2, r7
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff febe 	bl	80008d0 <aes_encrypt>

 return 0;
 8000b54:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	@ 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	080041e0 	.word	0x080041e0
 8000b64:	080041e8 	.word	0x080041e8
 8000b68:	080041f8 	.word	0x080041f8

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09a      	sub	sp, #104	@ 0x68
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2248      	movs	r2, #72	@ 0x48
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fccc 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <SystemClock_Config+0xac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <SystemClock_Config+0xac>)
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <SystemClock_Config+0xac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000bae:	2322      	movs	r3, #34	@ 0x22
 8000bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000bc4:	23a0      	movs	r3, #160	@ 0xa0
 8000bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f883 	bl	8001cdc <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000bdc:	f000 f8c0 	bl	8000d60 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000be0:	236f      	movs	r3, #111	@ 0x6f
 8000be2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fbdf 	bl	80023c4 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c0c:	f000 f8a8 	bl	8000d60 <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3768      	adds	r7, #104	@ 0x68
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58000400 	.word	0x58000400

08000c1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2250      	movs	r2, #80	@ 0x50
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fc75 	bl	8003518 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 ffd1 	bl	8002be6 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c4a:	f000 f889 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	@ 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f7ff ff38 	bl	8000ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff ff35 	bl	8000ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff32 	bl	8000ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	2008      	movs	r0, #8
 8000c80:	f7ff ff2f 	bl	8000ae2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2123      	movs	r1, #35	@ 0x23
 8000c88:	4824      	ldr	r0, [pc, #144]	@ (8000d1c <MX_GPIO_Init+0xc4>)
 8000c8a:	f000 fc93 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000ca0:	f000 fb18 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ca4:	2323      	movs	r3, #35	@ 0x23
 8000ca6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_GPIO_Init+0xc4>)
 8000cba:	f000 fb0b 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000cbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f000 fafa 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_GPIO_Init+0xcc>)
 8000cf2:	f000 faef 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cf6:	23c0      	movs	r3, #192	@ 0xc0
 8000cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d06:	2307      	movs	r3, #7
 8000d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <MX_GPIO_Init+0xc4>)
 8000d10:	f000 fae0 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000c00 	.word	0x48000c00

08000d28 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e009      	b.n	8000d4e <_write+0x26>
 {
 //__io_putchar(*ptr++);
 ITM_SendChar(*ptr++);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fea6 	bl	8000a94 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbf1      	blt.n	8000d3a <_write+0x12>
 }
 return len;
 8000d56:	687b      	ldr	r3, [r7, #4]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <HardFault_Handler+0x4>

08000d8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8e:	bf00      	nop
 8000d90:	e7fd      	b.n	8000d8e <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	bf00      	nop
 8000d98:	e7fd      	b.n	8000d96 <BusFault_Handler+0x4>

08000d9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9e:	bf00      	nop
 8000da0:	e7fd      	b.n	8000d9e <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f970 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
  }

  return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f002 fb82 	bl	80035b4 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20030000 	.word	0x20030000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	200001e0 	.word	0x200001e0

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <SystemInit+0x98>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef2:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <SystemInit+0x98>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f14:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <SystemInit+0x9c>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f32:	f023 0305 	bic.w	r3, r3, #5
 8000f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f52:	4a0d      	ldr	r2, [pc, #52]	@ (8000f88 <SystemInit+0xa0>)
 8000f54:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <SystemInit+0xa0>)
 8000f5c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	faf6fefb 	.word	0xfaf6fefb
 8000f88:	22041000 	.word	0x22041000

08000f8c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f8c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f90:	3304      	adds	r3, #4

08000f92 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f92:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f94:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f96:	d3f9      	bcc.n	8000f8c <CopyDataInit>
  bx lr
 8000f98:	4770      	bx	lr

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f9a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f9c:	3004      	adds	r0, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f9e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>
  bx lr
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff ff9e 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <LoopForever+0x6>)
 8000fae:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <LoopForever+0xa>)
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <LoopForever+0xe>)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f7ff ffed 	bl	8000f92 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <LoopForever+0x12>)
 8000fba:	490c      	ldr	r1, [pc, #48]	@ (8000fec <LoopForever+0x16>)
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <LoopForever+0x1a>)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f7ff ffe7 	bl	8000f92 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <LoopForever+0x1e>)
 8000fc6:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <LoopForever+0x22>)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f7ff ffe8 	bl	8000f9e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fce:	f002 faf7 	bl	80035c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fd2:	f7ff fd9f 	bl	8000b14 <main>

08000fd6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000070 	.word	0x20000070
 8000fe4:	080043f8 	.word	0x080043f8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fe8:	20030000 	.word	0x20030000
 8000fec:	20030000 	.word	0x20030000
 8000ff0:	08004460 	.word	0x08004460
  INIT_BSS _sbss, _ebss
 8000ff4:	20000070 	.word	0x20000070
 8000ff8:	200001e0 	.word	0x200001e0

08000ffc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_Init+0x3c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_Init+0x3c>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001014:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f92a 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f80f 	bl	8001040 <HAL_InitTick>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	e001      	b.n	8001032 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102e:	f7ff fe9d 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58004000 	.word	0x58004000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <HAL_InitTick+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d024      	beq.n	800109e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001054:	f001 fb62 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8001058:	4602      	mov	r2, r0
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_InitTick+0x6c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	fbb3 f3f1 	udiv	r3, r3, r1
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f924 	bl	80012ba <HAL_SYSTICK_Config>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	d809      	bhi.n	8001092 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107e:	2200      	movs	r2, #0
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	f000 f8fe 	bl	8001286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_InitTick+0x70>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e007      	b.n	80010a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e004      	b.n	80010a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000010 	.word	0x20000010
 80010b0:	2000000c 	.word	0x2000000c

080010b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000090 	.word	0x20000090

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000090 	.word	0x20000090

080010f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTickPrio+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c

0800110c <__NVIC_SetPriorityGrouping>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff47 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb2 	bl	800122c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e14c      	b.n	800157e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 813e 	beq.w	8001578 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d017      	beq.n	80013b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	6939      	ldr	r1, [r7, #16]
 8001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0203 	and.w	r2, r3, #3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8098 	beq.w	8001578 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001448:	4a54      	ldr	r2, [pc, #336]	@ (800159c <HAL_GPIO_Init+0x2c8>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001472:	d019      	beq.n	80014a8 <HAL_GPIO_Init+0x1d4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <HAL_GPIO_Init+0x2cc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_GPIO_Init+0x1d0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a49      	ldr	r2, [pc, #292]	@ (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1cc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a48      	ldr	r2, [pc, #288]	@ (80015a8 <HAL_GPIO_Init+0x2d4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1c8>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a47      	ldr	r2, [pc, #284]	@ (80015ac <HAL_GPIO_Init+0x2d8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1c4>
 8001494:	2304      	movs	r3, #4
 8001496:	e008      	b.n	80014aa <HAL_GPIO_Init+0x1d6>
 8001498:	2307      	movs	r3, #7
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x1d6>
 800149c:	2303      	movs	r3, #3
 800149e:	e004      	b.n	80014aa <HAL_GPIO_Init+0x1d6>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e002      	b.n	80014aa <HAL_GPIO_Init+0x1d6>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_GPIO_Init+0x1d6>
 80014a8:	2300      	movs	r3, #0
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	f002 0203 	and.w	r2, r2, #3
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	4093      	lsls	r3, r2
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ba:	4938      	ldr	r1, [pc, #224]	@ (800159c <HAL_GPIO_Init+0x2c8>)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c8:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ec:	4a30      	ldr	r2, [pc, #192]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001516:	4a26      	ldr	r2, [pc, #152]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001542:	4a1b      	ldr	r2, [pc, #108]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 800154c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	f47f aeab 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40010000 	.word	0x40010000
 80015a0:	48000400 	.word	0x48000400
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000c00 	.word	0x48000c00
 80015ac:	48001000 	.word	0x48001000
 80015b0:	58000800 	.word	0x58000800

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	58000400 	.word	0x58000400

08001604 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <HAL_PWREx_GetVoltageRange+0x18>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400

08001620 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001632:	d101      	bne.n	8001638 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001692:	d101      	bne.n	8001698 <LL_RCC_HSE_IsReady+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_RCC_HSE_IsReady+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_HSI_IsReady+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_HSI_IsReady+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d101      	bne.n	800178a <LL_RCC_HSI48_IsReady+0x18>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_RCC_HSI48_IsReady+0x1a>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d101      	bne.n	8001836 <LL_RCC_LSE_IsReady+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_RCC_LSE_IsReady+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d101      	bne.n	800189e <LL_RCC_LSI1_IsReady+0x18>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_RCC_LSI1_IsReady+0x1a>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d101      	bne.n	8001906 <LL_RCC_LSI2_IsReady+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_RCC_LSI2_IsReady+0x1a>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_RCC_MSI_IsReady+0x16>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_MSI_IsReady+0x18>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2bb0      	cmp	r3, #176	@ 0xb0
 80019dc:	d901      	bls.n	80019e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80019de:	23b0      	movs	r3, #176	@ 0xb0
 80019e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 0203 	bic.w	r2, r3, #3
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bae:	d101      	bne.n	8001bb4 <LL_RCC_PLL_IsReady+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_RCC_PLL_IsReady+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c34:	d101      	bne.n	8001c3a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c5a:	d101      	bne.n	8001c60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c80:	d101      	bne.n	8001c86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ca4:	d101      	bne.n	8001caa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cc8:	d101      	bne.n	8001cce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b08d      	sub	sp, #52	@ 0x34
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e363      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 808d 	beq.w	8001e16 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	f7ff fea1 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001d00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d02:	f7ff ff82 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001d06:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3e>
 8001d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d147      	bne.n	8001da4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d144      	bne.n	8001da4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e347      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001d2a:	f7ff fe4c 	bl	80019c6 <LL_RCC_MSI_GetRange>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	429c      	cmp	r4, r3
 8001d32:	d914      	bls.n	8001d5e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fd03 	bl	8002744 <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e336      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe26 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe4a 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001d5c:	e013      	b.n	8001d86 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe1b 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe3f 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fce4 	bl	8002744 <RCC_SetFlashLatencyFromMSIRange>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e317      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d86:	f000 fcc9 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4aa4      	ldr	r2, [pc, #656]	@ (8002020 <HAL_RCC_OscConfig+0x344>)
 8001d8e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d90:	4ba4      	ldr	r3, [pc, #656]	@ (8002024 <HAL_RCC_OscConfig+0x348>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff f953 	bl	8001040 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d039      	beq.n	8001e14 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e308      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01e      	beq.n	8001dea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dac:	f7ff fdc8 	bl	8001940 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f994 	bl	80010dc <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db8:	f7ff f990 	bl	80010dc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e2f5      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dca:	f7ff fdd7 	bl	800197c <LL_RCC_MSI_IsReady>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f1      	beq.n	8001db8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fde0 	bl	800199e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fe04 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001de8:	e015      	b.n	8001e16 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dea:	f7ff fdb8 	bl	800195e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dee:	f7ff f975 	bl	80010dc <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df6:	f7ff f971 	bl	80010dc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e2d6      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e08:	f7ff fdb8 	bl	800197c <LL_RCC_MSI_IsReady>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f1      	bne.n	8001df6 <HAL_RCC_OscConfig+0x11a>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d047      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	f7ff fe0e 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001e26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e28:	f7ff feef 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001e2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x164>
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d134      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e2b4      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x180>
 8001e56:	f7ff fbf5 	bl	8001644 <LL_RCC_HSE_Enable>
 8001e5a:	e001      	b.n	8001e60 <HAL_RCC_OscConfig+0x184>
 8001e5c:	f7ff fc01 	bl	8001662 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f938 	bl	80010dc <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f934 	bl	80010dc <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e299      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e82:	f7ff fbfd 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x194>
 8001e8c:	e011      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f925 	bl	80010dc <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e96:	f7ff f921 	bl	80010dc <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	@ 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e286      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ea8:	f7ff fbea 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f1      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	f7ff fdc0 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001ec2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	f7ff fea1 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8001ec8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e266      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc09 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ef2:	e031      	b.n	8001f58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	f7ff fbd2 	bl	80016a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f8ec 	bl	80010dc <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff f8e8 	bl	80010dc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e24d      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f1a:	f7ff fbe1 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbeb 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f30:	f7ff fbc7 	bl	80016c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f8d2 	bl	80010dc <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f8ce 	bl	80010dc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e233      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f4e:	f7ff fbc7 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f1      	bne.n	8001f3c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a3 	beq.w	80020b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d076      	beq.n	8002068 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d046      	beq.n	8002014 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f86:	f7ff fc7e 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d113      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f90:	f7ff fc57 	bl	8001842 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f94:	f7ff f8a2 	bl	80010dc <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f9c:	f7ff f89e 	bl	80010dc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e203      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001fae:	f7ff fc6a 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f1      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001fb8:	f7ff fc77 	bl	80018aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f88e 	bl	80010dc <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fc4:	f7ff f88a 	bl	80010dc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1ef      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001fd6:	f7ff fc8a 	bl	80018ee <LL_RCC_LSI2_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc94 	bl	8001912 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001fea:	f7ff fc3b 	bl	8001864 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff f875 	bl	80010dc <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ff6:	f7ff f871 	bl	80010dc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1d6      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002008:	f7ff fc3d 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f1      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x31a>
 8002012:	e051      	b.n	80020b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002014:	f7ff fc15 	bl	8001842 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f860 	bl	80010dc <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800201e:	e00c      	b.n	800203a <HAL_RCC_OscConfig+0x35e>
 8002020:	20000008 	.word	0x20000008
 8002024:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002028:	f7ff f858 	bl	80010dc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1bd      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800203a:	f7ff fc24 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f1      	beq.n	8002028 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002044:	f7ff fc42 	bl	80018cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800204a:	f7ff f847 	bl	80010dc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1ac      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800205c:	f7ff fc47 	bl	80018ee <LL_RCC_LSI2_IsReady>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f1      	bne.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002066:	e027      	b.n	80020b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002068:	f7ff fc30 	bl	80018cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff f836 	bl	80010dc <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002074:	f7ff f832 	bl	80010dc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e197      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002086:	f7ff fc32 	bl	80018ee <LL_RCC_LSI2_IsReady>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f1      	bne.n	8002074 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002090:	f7ff fbe8 	bl	8001864 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f822 	bl	80010dc <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800209c:	f7ff f81e 	bl	80010dc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e183      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020ae:	f7ff fbea 	bl	8001886 <LL_RCC_LSI1_IsReady>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f1      	bne.n	800209c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05b      	beq.n	800217c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002364 <HAL_RCC_OscConfig+0x688>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d114      	bne.n	80020fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020d0:	f7ff fa88 	bl	80015e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7ff f802 	bl	80010dc <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fffe 	bl	80010dc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e163      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b9d      	ldr	r3, [pc, #628]	@ (8002364 <HAL_RCC_OscConfig+0x688>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x42c>
 8002102:	f7ff fb48 	bl	8001796 <LL_RCC_LSE_Enable>
 8002106:	e00c      	b.n	8002122 <HAL_RCC_OscConfig+0x446>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d104      	bne.n	800211a <HAL_RCC_OscConfig+0x43e>
 8002110:	f7ff fb63 	bl	80017da <LL_RCC_LSE_EnableBypass>
 8002114:	f7ff fb3f 	bl	8001796 <LL_RCC_LSE_Enable>
 8002118:	e003      	b.n	8002122 <HAL_RCC_OscConfig+0x446>
 800211a:	f7ff fb4d 	bl	80017b8 <LL_RCC_LSE_Disable>
 800211e:	f7ff fb6d 	bl	80017fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d014      	beq.n	8002154 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe ffd7 	bl	80010dc <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe ffd3 	bl	80010dc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e136      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002148:	f7ff fb69 	bl	800181e <LL_RCC_LSE_IsReady>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCC_OscConfig+0x456>
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe ffc2 	bl	80010dc <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe ffbe 	bl	80010dc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e121      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002172:	f7ff fb54 	bl	800181e <LL_RCC_LSE_IsReady>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ef      	bne.n	800215c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002190:	f7ff facd 	bl	800172e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe ffa2 	bl	80010dc <HAL_GetTick>
 8002198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7fe ff9e 	bl	80010dc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e103      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021ae:	f7ff fae0 	bl	8001772 <LL_RCC_HSI48_IsReady>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f1      	beq.n	800219c <HAL_RCC_OscConfig+0x4c0>
 80021b8:	e013      	b.n	80021e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ba:	f7ff fac9 	bl	8001750 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe ff8d 	bl	80010dc <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c6:	f7fe ff89 	bl	80010dc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ee      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021d8:	f7ff facb 	bl	8001772 <LL_RCC_HSI48_IsReady>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80e4 	beq.w	80023b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ec:	f7ff fc29 	bl	8001a42 <LL_RCC_GetSysClkSource>
 80021f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80b4 	bne.w	800236c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	429a      	cmp	r2, r3
 8002210:	d123      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d11c      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d114      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d10d      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d05d      	beq.n	8002316 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d058      	beq.n	8002312 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0a1      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002272:	f7ff fc84 	bl	8001b7e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002276:	f7fe ff31 	bl	80010dc <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe ff2d 	bl	80010dc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e092      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ef      	bne.n	800227e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_RCC_OscConfig+0x68c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022b6:	0212      	lsls	r2, r2, #8
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022ca:	430a      	orrs	r2, r1
 80022cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022d4:	f7ff fc44 	bl	8001b60 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e8:	f7fe fef8 	bl	80010dc <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fef4 	bl	80010dc <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e059      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ef      	beq.n	80022f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	e050      	b.n	80023b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e04f      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d147      	bne.n	80023b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002324:	f7ff fc1c 	bl	8001b60 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002338:	f7fe fed0 	bl	80010dc <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fecc 	bl	80010dc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e031      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCC_OscConfig+0x664>
 8002360:	e028      	b.n	80023b4 <HAL_RCC_OscConfig+0x6d8>
 8002362:	bf00      	nop
 8002364:	58000400 	.word	0x58000400
 8002368:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d01e      	beq.n	80023b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	f7ff fc04 	bl	8001b7e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe feb1 	bl	80010dc <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fead 	bl	80010dc <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e012      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ef      	bne.n	800237e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_OscConfig+0x6e4>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60cb      	str	r3, [r1, #12]
 80023ae:	e001      	b.n	80023b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3734      	adds	r7, #52	@ 0x34
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop
 80023c0:	eefefffc 	.word	0xeefefffc

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e12d      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b98      	ldr	r3, [pc, #608]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d91b      	bls.n	800241e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b95      	ldr	r3, [pc, #596]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4993      	ldr	r1, [pc, #588]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f6:	f7fe fe71 	bl	80010dc <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023fe:	f7fe fe6d 	bl	80010dc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e111      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002410:	4b8a      	ldr	r3, [pc, #552]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d1ef      	bne.n	80023fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fb13 	bl	8001a5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002434:	f7fe fe52 	bl	80010dc <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800243c:	f7fe fe4e 	bl	80010dc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0f2      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800244e:	f7ff fbe8 	bl	8001c22 <LL_RCC_IsActiveFlag_HPRE>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f1      	beq.n	800243c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fb0a 	bl	8001a82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800246e:	f7fe fe35 	bl	80010dc <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002476:	f7fe fe31 	bl	80010dc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0d5      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002488:	f7ff fbdd 	bl	8001c46 <LL_RCC_IsActiveFlag_C2HPRE>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f1      	beq.n	8002476 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb03 	bl	8001aae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fe18 	bl	80010dc <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024b0:	f7fe fe14 	bl	80010dc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0b8      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024c2:	f7ff fbd3 	bl	8001c6c <LL_RCC_IsActiveFlag_SHDHPRE>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d016      	beq.n	8002506 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fafd 	bl	8001adc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024e2:	f7fe fdfb 	bl	80010dc <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024ea:	f7fe fdf7 	bl	80010dc <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e09b      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024fc:	f7ff fbc9 	bl	8001c92 <LL_RCC_IsActiveFlag_PPRE1>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f1      	beq.n	80024ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff faf3 	bl	8001b04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800251e:	f7fe fddd 	bl	80010dc <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002526:	f7fe fdd9 	bl	80010dc <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e07d      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002538:	f7ff fbbd 	bl	8001cb6 <LL_RCC_IsActiveFlag_PPRE2>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f1      	beq.n	8002526 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d043      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d106      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002556:	f7ff f893 	bl	8001680 <LL_RCC_HSE_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11e      	bne.n	800259e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e067      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d106      	bne.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800256c:	f7ff fb16 	bl	8001b9c <LL_RCC_PLL_IsReady>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d113      	bne.n	800259e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e05c      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002582:	f7ff f9fb 	bl	800197c <LL_RCC_MSI_IsReady>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e051      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002590:	f7ff f8a6 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e04a      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fa39 	bl	8001a1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd98 	bl	80010dc <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fd94 	bl	80010dc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e036      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	f7ff fa3c 	bl	8001a42 <LL_RCC_GetSysClkSource>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d1ec      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d21b      	bcs.n	800261c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	4913      	ldr	r1, [pc, #76]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fd72 	bl	80010dc <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	e008      	b.n	800260e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025fc:	f7fe fd6e 	bl	80010dc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e012      	b.n	8002634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_ClockConfig+0x278>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d1ef      	bne.n	80025fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800261c:	f000 f87e 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002620:	4603      	mov	r3, r0
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_RCC_ClockConfig+0x27c>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002626:	f7fe fd65 	bl	80010f4 <HAL_GetTickPrio>
 800262a:	4603      	mov	r3, r0
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fd07 	bl	8001040 <HAL_InitTick>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58004000 	.word	0x58004000
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	f7ff f9fa 	bl	8001a42 <LL_RCC_GetSysClkSource>
 800264e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002656:	f7ff f9b6 	bl	80019c6 <LL_RCC_MSI_GetRange>
 800265a:	4603      	mov	r3, r0
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e04b      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d102      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e045      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d10a      	bne.n	8002694 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800267e:	f7fe ffcf 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xd0>)
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e03a      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e037      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002694:	f7ff fab9 	bl	8001c0a <LL_RCC_PLL_GetMainSource>
 8002698:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d003      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x64>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x6a>
 80026a6:	e00d      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026aa:	60bb      	str	r3, [r7, #8]
        break;
 80026ac:	e015      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026ae:	f7fe ffb7 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026bc:	e00d      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026c0:	60bb      	str	r3, [r7, #8]
        break;
 80026c2:	e00a      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026c4:	f7ff f97f 	bl	80019c6 <LL_RCC_MSI_GetRange>
 80026c8:	4603      	mov	r3, r0
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	60bb      	str	r3, [r7, #8]
        break;
 80026d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80026da:	f7ff fa71 	bl	8001bc0 <LL_RCC_PLL_GetN>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	fb03 f402 	mul.w	r4, r3, r2
 80026e6:	f7ff fa84 	bl	8001bf2 <LL_RCC_PLL_GetDivider>
 80026ea:	4603      	mov	r3, r0
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	3301      	adds	r3, #1
 80026f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80026f4:	f7ff fa71 	bl	8001bda <LL_RCC_PLL_GetR>
 80026f8:	4603      	mov	r3, r0
 80026fa:	0f5b      	lsrs	r3, r3, #29
 80026fc:	3301      	adds	r3, #1
 80026fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8002702:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}
 800270e:	bf00      	nop
 8002710:	08004374 	.word	0x08004374
 8002714:	00f42400 	.word	0x00f42400
 8002718:	01e84800 	.word	0x01e84800

0800271c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800271c:	b598      	push	{r3, r4, r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002720:	f7ff ff90 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002724:	4604      	mov	r4, r0
 8002726:	f7ff fa01 	bl	8001b2c <LL_RCC_GetAHBPrescaler>
 800272a:	4603      	mov	r3, r0
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a03      	ldr	r2, [pc, #12]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x24>)
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd98      	pop	{r3, r4, r7, pc}
 8002740:	08004334 	.word	0x08004334

08002744 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002750:	d903      	bls.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e007      	b.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800276a:	f7ff f9eb 	bl	8001b44 <LL_RCC_GetAHB4Prescaler>
 800276e:	4603      	mov	r3, r0
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	0c9c      	lsrs	r4, r3, #18
 800278e:	f7fe ff39 	bl	8001604 <HAL_PWREx_GetVoltageRange>
 8002792:	4603      	mov	r3, r0
 8002794:	4619      	mov	r1, r3
 8002796:	4620      	mov	r0, r4
 8002798:	f000 f80c 	bl	80027b4 <RCC_SetFlashLatency>
 800279c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08004374 	.word	0x08004374
 80027ac:	08004334 	.word	0x08004334
 80027b0:	431bde83 	.word	0x431bde83

080027b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b093      	sub	sp, #76	@ 0x4c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <RCC_SetFlashLatency+0xe8>)
 80027c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80027c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80027ca:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <RCC_SetFlashLatency+0xec>)
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <RCC_SetFlashLatency+0xf0>)
 80027d8:	f107 040c 	add.w	r4, r7, #12
 80027dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027e2:	2300      	movs	r3, #0
 80027e4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ec:	d11a      	bne.n	8002824 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80027f2:	e013      	b.n	800281c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3348      	adds	r3, #72	@ 0x48
 80027fa:	443b      	add	r3, r7
 80027fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d807      	bhi.n	8002816 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3348      	adds	r3, #72	@ 0x48
 800280c:	443b      	add	r3, r7
 800280e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002812:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002814:	e020      	b.n	8002858 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002818:	3301      	adds	r3, #1
 800281a:	643b      	str	r3, [r7, #64]	@ 0x40
 800281c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281e:	2b03      	cmp	r3, #3
 8002820:	d9e8      	bls.n	80027f4 <RCC_SetFlashLatency+0x40>
 8002822:	e019      	b.n	8002858 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002828:	e013      	b.n	8002852 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800282a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3348      	adds	r3, #72	@ 0x48
 8002830:	443b      	add	r3, r7
 8002832:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d807      	bhi.n	800284c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800283c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3348      	adds	r3, #72	@ 0x48
 8002842:	443b      	add	r3, r7
 8002844:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002848:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800284a:	e005      	b.n	8002858 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800284c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284e:	3301      	adds	r3, #1
 8002850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002854:	2b02      	cmp	r3, #2
 8002856:	d9e8      	bls.n	800282a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <RCC_SetFlashLatency+0xf4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	4911      	ldr	r1, [pc, #68]	@ (80028a8 <RCC_SetFlashLatency+0xf4>)
 8002862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002868:	f7fe fc38 	bl	80010dc <HAL_GetTick>
 800286c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800286e:	e008      	b.n	8002882 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002870:	f7fe fc34 	bl	80010dc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e007      	b.n	8002892 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <RCC_SetFlashLatency+0xf4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800288c:	429a      	cmp	r2, r3
 800288e:	d1ef      	bne.n	8002870 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	374c      	adds	r7, #76	@ 0x4c
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}
 800289a:	bf00      	nop
 800289c:	08004208 	.word	0x08004208
 80028a0:	08004218 	.word	0x08004218
 80028a4:	08004224 	.word	0x08004224
 80028a8:	58004000 	.word	0x58004000

080028ac <LL_RCC_LSE_IsEnabled>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <LL_RCC_LSE_IsEnabled+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_RCC_LSE_IsReady>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d101      	bne.n	80028e8 <LL_RCC_LSE_IsReady+0x18>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_RCC_LSE_IsReady+0x1a>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_SetRFWKPClockSource>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002904:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_RCC_SetSMPSClockSource>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4313      	orrs	r3, r2
 800293a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_RCC_SetSMPSPrescaler>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800295a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4313      	orrs	r3, r2
 8002962:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_RCC_SetUSARTClockSource>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f023 0203 	bic.w	r2, r3, #3
 8002984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_RCC_SetLPUARTClockSource>:
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_SetI2CClockSource>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80029ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_SetLPTIMClockSource>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_SetSAIClockSource>:
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_SetRNGClockSource>:
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_RCC_SetCLK48ClockSource>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetUSBClockSource>:
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffe3 	bl	8002a8e <LL_RCC_SetCLK48ClockSource>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_RCC_SetADCClockSource>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ae4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_SetRTCClockSource>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_GetRTCClockSource>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_ForceBackupDomainReset>:
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_PLLSAI1_Enable>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b98:	6013      	str	r3, [r2, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_PLLSAI1_Disable>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_PLLSAI1_IsReady>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bd4:	d101      	bne.n	8002bda <LL_RCC_PLLSAI1_IsReady+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d034      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c0a:	d021      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c10:	d81b      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c16:	d01d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c1c:	d815      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c26:	d110      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c36:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c38:	e00d      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f947 	bl	8002ed2 <RCCEx_PLLSAI1_ConfigNP>
 8002c44:	4603      	mov	r3, r0
 8002c46:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c48:	e005      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	77fb      	strb	r3, [r7, #31]
        break;
 8002c4e:	e002      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fee8 	bl	8002a36 <LL_RCC_SetSAIClockSource>
 8002c66:	e001      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7ffb      	ldrb	r3, [r7, #31]
 8002c6a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d046      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c78:	f7ff ff56 	bl	8002b28 <LL_RCC_GetRTCClockSource>
 8002c7c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d03c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c88:	f7fe fcac 	bl	80015e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff30 	bl	8002afc <LL_RCC_SetRTCClockSource>
 8002c9c:	e02e      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ca8:	f7ff ff4b 	bl	8002b42 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002cac:	f7ff ff5a 	bl	8002b64 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002cc8:	f7ff fdf0 	bl	80028ac <LL_RCC_LSE_IsEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d114      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd2:	f7fe fa03 	bl	80010dc <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f9ff 	bl	80010dc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d902      	bls.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	77fb      	strb	r3, [r7, #31]
              break;
 8002cf0:	e004      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cf2:	f7ff fded 	bl	80028d0 <LL_RCC_LSE_IsReady>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	77bb      	strb	r3, [r7, #30]
 8002d00:	e001      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fe2a 	bl	8002970 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fe35 	bl	800299c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe5d 	bl	8002a02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fe52 	bl	8002a02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fe2a 	bl	80029c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fe1f 	bl	80029c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d022      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe8d 	bl	8002aba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002da8:	d107      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f8dd 	bl	8002f88 <RCCEx_PLLSAI1_ConfigNQ>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002dd2:	7ffb      	ldrb	r3, [r7, #31]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fe2a 	bl	8002a62 <LL_RCC_SetRNGClockSource>
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fe21 	bl	8002a62 <LL_RCC_SetRNGClockSource>
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff fe34 	bl	8002a8e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fe3d 	bl	8002ad0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f8dd 	bl	800303e <RCCEx_PLLSAI1_ConfigNR>
 8002e84:	4603      	mov	r3, r0
 8002e86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e88:	7ffb      	ldrb	r3, [r7, #31]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fd26 	bl	80028f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fd45 	bl	8002948 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fd2c 	bl	8002920 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ede:	f7ff fe61 	bl	8002ba4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ee2:	f7fe f8fb 	bl	80010dc <HAL_GetTick>
 8002ee6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ee8:	e009      	b.n	8002efe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eea:	f7fe f8f7 	bl	80010dc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e004      	b.n	8002f08 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002efe:	f7ff fe60 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d137      	bne.n	8002f7e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f3c:	f7ff fe23 	bl	8002b86 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe f8cc 	bl	80010dc <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f48:	f7fe f8c8 	bl	80010dc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e004      	b.n	8002f66 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f5c:	f7ff fe31 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d1f0      	bne.n	8002f48 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d108      	bne.n	8002f7e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f94:	f7ff fe06 	bl	8002ba4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f98:	f7fe f8a0 	bl	80010dc <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa0:	f7fe f89c 	bl	80010dc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb2:	e004      	b.n	8002fbe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fb4:	f7ff fe05 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d137      	bne.n	8003034 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ff2:	f7ff fdc8 	bl	8002b86 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff6:	f7fe f871 	bl	80010dc <HAL_GetTick>
 8002ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ffc:	e009      	b.n	8003012 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffe:	f7fe f86d 	bl	80010dc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d902      	bls.n	8003012 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	73fb      	strb	r3, [r7, #15]
        break;
 8003010:	e004      	b.n	800301c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003012:	f7ff fdd6 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d1f0      	bne.n	8002ffe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800304a:	f7ff fdab 	bl	8002ba4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800304e:	f7fe f845 	bl	80010dc <HAL_GetTick>
 8003052:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003054:	e009      	b.n	800306a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003056:	f7fe f841 	bl	80010dc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d902      	bls.n	800306a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e004      	b.n	8003074 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800306a:	f7ff fdaa 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d137      	bne.n	80030ea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800308e:	4313      	orrs	r3, r2
 8003090:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a4:	4313      	orrs	r3, r2
 80030a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030a8:	f7ff fd6d 	bl	8002b86 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe f816 	bl	80010dc <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030b2:	e009      	b.n	80030c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b4:	f7fe f812 	bl	80010dc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	73fb      	strb	r3, [r7, #15]
        break;
 80030c6:	e004      	b.n	80030d2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030c8:	f7ff fd7b 	bl	8002bc2 <LL_RCC_PLLSAI1_IsReady>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d1f0      	bne.n	80030b4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030e6:	4313      	orrs	r3, r2
 80030e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <std>:
 80030f4:	2300      	movs	r3, #0
 80030f6:	b510      	push	{r4, lr}
 80030f8:	4604      	mov	r4, r0
 80030fa:	e9c0 3300 	strd	r3, r3, [r0]
 80030fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003102:	6083      	str	r3, [r0, #8]
 8003104:	8181      	strh	r1, [r0, #12]
 8003106:	6643      	str	r3, [r0, #100]	@ 0x64
 8003108:	81c2      	strh	r2, [r0, #14]
 800310a:	6183      	str	r3, [r0, #24]
 800310c:	4619      	mov	r1, r3
 800310e:	2208      	movs	r2, #8
 8003110:	305c      	adds	r0, #92	@ 0x5c
 8003112:	f000 fa01 	bl	8003518 <memset>
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <std+0x58>)
 8003118:	6263      	str	r3, [r4, #36]	@ 0x24
 800311a:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <std+0x5c>)
 800311c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <std+0x60>)
 8003120:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <std+0x64>)
 8003124:	6323      	str	r3, [r4, #48]	@ 0x30
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <std+0x68>)
 8003128:	6224      	str	r4, [r4, #32]
 800312a:	429c      	cmp	r4, r3
 800312c:	d006      	beq.n	800313c <std+0x48>
 800312e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003132:	4294      	cmp	r4, r2
 8003134:	d002      	beq.n	800313c <std+0x48>
 8003136:	33d0      	adds	r3, #208	@ 0xd0
 8003138:	429c      	cmp	r4, r3
 800313a:	d105      	bne.n	8003148 <std+0x54>
 800313c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003144:	f000 ba60 	b.w	8003608 <__retarget_lock_init_recursive>
 8003148:	bd10      	pop	{r4, pc}
 800314a:	bf00      	nop
 800314c:	08003369 	.word	0x08003369
 8003150:	0800338b 	.word	0x0800338b
 8003154:	080033c3 	.word	0x080033c3
 8003158:	080033e7 	.word	0x080033e7
 800315c:	20000094 	.word	0x20000094

08003160 <stdio_exit_handler>:
 8003160:	4a02      	ldr	r2, [pc, #8]	@ (800316c <stdio_exit_handler+0xc>)
 8003162:	4903      	ldr	r1, [pc, #12]	@ (8003170 <stdio_exit_handler+0x10>)
 8003164:	4803      	ldr	r0, [pc, #12]	@ (8003174 <stdio_exit_handler+0x14>)
 8003166:	f000 b869 	b.w	800323c <_fwalk_sglue>
 800316a:	bf00      	nop
 800316c:	20000014 	.word	0x20000014
 8003170:	08003ec1 	.word	0x08003ec1
 8003174:	20000024 	.word	0x20000024

08003178 <cleanup_stdio>:
 8003178:	6841      	ldr	r1, [r0, #4]
 800317a:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <cleanup_stdio+0x34>)
 800317c:	4299      	cmp	r1, r3
 800317e:	b510      	push	{r4, lr}
 8003180:	4604      	mov	r4, r0
 8003182:	d001      	beq.n	8003188 <cleanup_stdio+0x10>
 8003184:	f000 fe9c 	bl	8003ec0 <_fflush_r>
 8003188:	68a1      	ldr	r1, [r4, #8]
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <cleanup_stdio+0x38>)
 800318c:	4299      	cmp	r1, r3
 800318e:	d002      	beq.n	8003196 <cleanup_stdio+0x1e>
 8003190:	4620      	mov	r0, r4
 8003192:	f000 fe95 	bl	8003ec0 <_fflush_r>
 8003196:	68e1      	ldr	r1, [r4, #12]
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <cleanup_stdio+0x3c>)
 800319a:	4299      	cmp	r1, r3
 800319c:	d004      	beq.n	80031a8 <cleanup_stdio+0x30>
 800319e:	4620      	mov	r0, r4
 80031a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a4:	f000 be8c 	b.w	8003ec0 <_fflush_r>
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	bf00      	nop
 80031ac:	20000094 	.word	0x20000094
 80031b0:	200000fc 	.word	0x200000fc
 80031b4:	20000164 	.word	0x20000164

080031b8 <global_stdio_init.part.0>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <global_stdio_init.part.0+0x30>)
 80031bc:	4c0b      	ldr	r4, [pc, #44]	@ (80031ec <global_stdio_init.part.0+0x34>)
 80031be:	4a0c      	ldr	r2, [pc, #48]	@ (80031f0 <global_stdio_init.part.0+0x38>)
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	4620      	mov	r0, r4
 80031c4:	2200      	movs	r2, #0
 80031c6:	2104      	movs	r1, #4
 80031c8:	f7ff ff94 	bl	80030f4 <std>
 80031cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031d0:	2201      	movs	r2, #1
 80031d2:	2109      	movs	r1, #9
 80031d4:	f7ff ff8e 	bl	80030f4 <std>
 80031d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031dc:	2202      	movs	r2, #2
 80031de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e2:	2112      	movs	r1, #18
 80031e4:	f7ff bf86 	b.w	80030f4 <std>
 80031e8:	200001cc 	.word	0x200001cc
 80031ec:	20000094 	.word	0x20000094
 80031f0:	08003161 	.word	0x08003161

080031f4 <__sfp_lock_acquire>:
 80031f4:	4801      	ldr	r0, [pc, #4]	@ (80031fc <__sfp_lock_acquire+0x8>)
 80031f6:	f000 ba08 	b.w	800360a <__retarget_lock_acquire_recursive>
 80031fa:	bf00      	nop
 80031fc:	200001d5 	.word	0x200001d5

08003200 <__sfp_lock_release>:
 8003200:	4801      	ldr	r0, [pc, #4]	@ (8003208 <__sfp_lock_release+0x8>)
 8003202:	f000 ba03 	b.w	800360c <__retarget_lock_release_recursive>
 8003206:	bf00      	nop
 8003208:	200001d5 	.word	0x200001d5

0800320c <__sinit>:
 800320c:	b510      	push	{r4, lr}
 800320e:	4604      	mov	r4, r0
 8003210:	f7ff fff0 	bl	80031f4 <__sfp_lock_acquire>
 8003214:	6a23      	ldr	r3, [r4, #32]
 8003216:	b11b      	cbz	r3, 8003220 <__sinit+0x14>
 8003218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800321c:	f7ff bff0 	b.w	8003200 <__sfp_lock_release>
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__sinit+0x28>)
 8003222:	6223      	str	r3, [r4, #32]
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <__sinit+0x2c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f5      	bne.n	8003218 <__sinit+0xc>
 800322c:	f7ff ffc4 	bl	80031b8 <global_stdio_init.part.0>
 8003230:	e7f2      	b.n	8003218 <__sinit+0xc>
 8003232:	bf00      	nop
 8003234:	08003179 	.word	0x08003179
 8003238:	200001cc 	.word	0x200001cc

0800323c <_fwalk_sglue>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	4607      	mov	r7, r0
 8003242:	4688      	mov	r8, r1
 8003244:	4614      	mov	r4, r2
 8003246:	2600      	movs	r6, #0
 8003248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800324c:	f1b9 0901 	subs.w	r9, r9, #1
 8003250:	d505      	bpl.n	800325e <_fwalk_sglue+0x22>
 8003252:	6824      	ldr	r4, [r4, #0]
 8003254:	2c00      	cmp	r4, #0
 8003256:	d1f7      	bne.n	8003248 <_fwalk_sglue+0xc>
 8003258:	4630      	mov	r0, r6
 800325a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800325e:	89ab      	ldrh	r3, [r5, #12]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d907      	bls.n	8003274 <_fwalk_sglue+0x38>
 8003264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003268:	3301      	adds	r3, #1
 800326a:	d003      	beq.n	8003274 <_fwalk_sglue+0x38>
 800326c:	4629      	mov	r1, r5
 800326e:	4638      	mov	r0, r7
 8003270:	47c0      	blx	r8
 8003272:	4306      	orrs	r6, r0
 8003274:	3568      	adds	r5, #104	@ 0x68
 8003276:	e7e9      	b.n	800324c <_fwalk_sglue+0x10>

08003278 <iprintf>:
 8003278:	b40f      	push	{r0, r1, r2, r3}
 800327a:	b507      	push	{r0, r1, r2, lr}
 800327c:	4906      	ldr	r1, [pc, #24]	@ (8003298 <iprintf+0x20>)
 800327e:	ab04      	add	r3, sp, #16
 8003280:	6808      	ldr	r0, [r1, #0]
 8003282:	f853 2b04 	ldr.w	r2, [r3], #4
 8003286:	6881      	ldr	r1, [r0, #8]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	f000 faf1 	bl	8003870 <_vfiprintf_r>
 800328e:	b003      	add	sp, #12
 8003290:	f85d eb04 	ldr.w	lr, [sp], #4
 8003294:	b004      	add	sp, #16
 8003296:	4770      	bx	lr
 8003298:	20000020 	.word	0x20000020

0800329c <putchar>:
 800329c:	4b02      	ldr	r3, [pc, #8]	@ (80032a8 <putchar+0xc>)
 800329e:	4601      	mov	r1, r0
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	6882      	ldr	r2, [r0, #8]
 80032a4:	f000 be96 	b.w	8003fd4 <_putc_r>
 80032a8:	20000020 	.word	0x20000020

080032ac <_puts_r>:
 80032ac:	6a03      	ldr	r3, [r0, #32]
 80032ae:	b570      	push	{r4, r5, r6, lr}
 80032b0:	6884      	ldr	r4, [r0, #8]
 80032b2:	4605      	mov	r5, r0
 80032b4:	460e      	mov	r6, r1
 80032b6:	b90b      	cbnz	r3, 80032bc <_puts_r+0x10>
 80032b8:	f7ff ffa8 	bl	800320c <__sinit>
 80032bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032be:	07db      	lsls	r3, r3, #31
 80032c0:	d405      	bmi.n	80032ce <_puts_r+0x22>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	0598      	lsls	r0, r3, #22
 80032c6:	d402      	bmi.n	80032ce <_puts_r+0x22>
 80032c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ca:	f000 f99e 	bl	800360a <__retarget_lock_acquire_recursive>
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	0719      	lsls	r1, r3, #28
 80032d2:	d502      	bpl.n	80032da <_puts_r+0x2e>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d135      	bne.n	8003346 <_puts_r+0x9a>
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f8c5 	bl	800346c <__swsetup_r>
 80032e2:	b380      	cbz	r0, 8003346 <_puts_r+0x9a>
 80032e4:	f04f 35ff 	mov.w	r5, #4294967295
 80032e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032ea:	07da      	lsls	r2, r3, #31
 80032ec:	d405      	bmi.n	80032fa <_puts_r+0x4e>
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	059b      	lsls	r3, r3, #22
 80032f2:	d402      	bmi.n	80032fa <_puts_r+0x4e>
 80032f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032f6:	f000 f989 	bl	800360c <__retarget_lock_release_recursive>
 80032fa:	4628      	mov	r0, r5
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da04      	bge.n	800330c <_puts_r+0x60>
 8003302:	69a2      	ldr	r2, [r4, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	dc17      	bgt.n	8003338 <_puts_r+0x8c>
 8003308:	290a      	cmp	r1, #10
 800330a:	d015      	beq.n	8003338 <_puts_r+0x8c>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	6022      	str	r2, [r4, #0]
 8003312:	7019      	strb	r1, [r3, #0]
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800331a:	3b01      	subs	r3, #1
 800331c:	60a3      	str	r3, [r4, #8]
 800331e:	2900      	cmp	r1, #0
 8003320:	d1ed      	bne.n	80032fe <_puts_r+0x52>
 8003322:	2b00      	cmp	r3, #0
 8003324:	da11      	bge.n	800334a <_puts_r+0x9e>
 8003326:	4622      	mov	r2, r4
 8003328:	210a      	movs	r1, #10
 800332a:	4628      	mov	r0, r5
 800332c:	f000 f85f 	bl	80033ee <__swbuf_r>
 8003330:	3001      	adds	r0, #1
 8003332:	d0d7      	beq.n	80032e4 <_puts_r+0x38>
 8003334:	250a      	movs	r5, #10
 8003336:	e7d7      	b.n	80032e8 <_puts_r+0x3c>
 8003338:	4622      	mov	r2, r4
 800333a:	4628      	mov	r0, r5
 800333c:	f000 f857 	bl	80033ee <__swbuf_r>
 8003340:	3001      	adds	r0, #1
 8003342:	d1e7      	bne.n	8003314 <_puts_r+0x68>
 8003344:	e7ce      	b.n	80032e4 <_puts_r+0x38>
 8003346:	3e01      	subs	r6, #1
 8003348:	e7e4      	b.n	8003314 <_puts_r+0x68>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	220a      	movs	r2, #10
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e7ee      	b.n	8003334 <_puts_r+0x88>
	...

08003358 <puts>:
 8003358:	4b02      	ldr	r3, [pc, #8]	@ (8003364 <puts+0xc>)
 800335a:	4601      	mov	r1, r0
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f7ff bfa5 	b.w	80032ac <_puts_r>
 8003362:	bf00      	nop
 8003364:	20000020 	.word	0x20000020

08003368 <__sread>:
 8003368:	b510      	push	{r4, lr}
 800336a:	460c      	mov	r4, r1
 800336c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003370:	f000 f8fc 	bl	800356c <_read_r>
 8003374:	2800      	cmp	r0, #0
 8003376:	bfab      	itete	ge
 8003378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800337a:	89a3      	ldrhlt	r3, [r4, #12]
 800337c:	181b      	addge	r3, r3, r0
 800337e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003382:	bfac      	ite	ge
 8003384:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003386:	81a3      	strhlt	r3, [r4, #12]
 8003388:	bd10      	pop	{r4, pc}

0800338a <__swrite>:
 800338a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338e:	461f      	mov	r7, r3
 8003390:	898b      	ldrh	r3, [r1, #12]
 8003392:	05db      	lsls	r3, r3, #23
 8003394:	4605      	mov	r5, r0
 8003396:	460c      	mov	r4, r1
 8003398:	4616      	mov	r6, r2
 800339a:	d505      	bpl.n	80033a8 <__swrite+0x1e>
 800339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a0:	2302      	movs	r3, #2
 80033a2:	2200      	movs	r2, #0
 80033a4:	f000 f8d0 	bl	8003548 <_lseek_r>
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	4632      	mov	r2, r6
 80033b6:	463b      	mov	r3, r7
 80033b8:	4628      	mov	r0, r5
 80033ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033be:	f000 b8e7 	b.w	8003590 <_write_r>

080033c2 <__sseek>:
 80033c2:	b510      	push	{r4, lr}
 80033c4:	460c      	mov	r4, r1
 80033c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ca:	f000 f8bd 	bl	8003548 <_lseek_r>
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	bf15      	itete	ne
 80033d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033de:	81a3      	strheq	r3, [r4, #12]
 80033e0:	bf18      	it	ne
 80033e2:	81a3      	strhne	r3, [r4, #12]
 80033e4:	bd10      	pop	{r4, pc}

080033e6 <__sclose>:
 80033e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ea:	f000 b89d 	b.w	8003528 <_close_r>

080033ee <__swbuf_r>:
 80033ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f0:	460e      	mov	r6, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	4605      	mov	r5, r0
 80033f6:	b118      	cbz	r0, 8003400 <__swbuf_r+0x12>
 80033f8:	6a03      	ldr	r3, [r0, #32]
 80033fa:	b90b      	cbnz	r3, 8003400 <__swbuf_r+0x12>
 80033fc:	f7ff ff06 	bl	800320c <__sinit>
 8003400:	69a3      	ldr	r3, [r4, #24]
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	071a      	lsls	r2, r3, #28
 8003408:	d501      	bpl.n	800340e <__swbuf_r+0x20>
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	b943      	cbnz	r3, 8003420 <__swbuf_r+0x32>
 800340e:	4621      	mov	r1, r4
 8003410:	4628      	mov	r0, r5
 8003412:	f000 f82b 	bl	800346c <__swsetup_r>
 8003416:	b118      	cbz	r0, 8003420 <__swbuf_r+0x32>
 8003418:	f04f 37ff 	mov.w	r7, #4294967295
 800341c:	4638      	mov	r0, r7
 800341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	6922      	ldr	r2, [r4, #16]
 8003424:	1a98      	subs	r0, r3, r2
 8003426:	6963      	ldr	r3, [r4, #20]
 8003428:	b2f6      	uxtb	r6, r6
 800342a:	4283      	cmp	r3, r0
 800342c:	4637      	mov	r7, r6
 800342e:	dc05      	bgt.n	800343c <__swbuf_r+0x4e>
 8003430:	4621      	mov	r1, r4
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fd44 	bl	8003ec0 <_fflush_r>
 8003438:	2800      	cmp	r0, #0
 800343a:	d1ed      	bne.n	8003418 <__swbuf_r+0x2a>
 800343c:	68a3      	ldr	r3, [r4, #8]
 800343e:	3b01      	subs	r3, #1
 8003440:	60a3      	str	r3, [r4, #8]
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	6022      	str	r2, [r4, #0]
 8003448:	701e      	strb	r6, [r3, #0]
 800344a:	6962      	ldr	r2, [r4, #20]
 800344c:	1c43      	adds	r3, r0, #1
 800344e:	429a      	cmp	r2, r3
 8003450:	d004      	beq.n	800345c <__swbuf_r+0x6e>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	07db      	lsls	r3, r3, #31
 8003456:	d5e1      	bpl.n	800341c <__swbuf_r+0x2e>
 8003458:	2e0a      	cmp	r6, #10
 800345a:	d1df      	bne.n	800341c <__swbuf_r+0x2e>
 800345c:	4621      	mov	r1, r4
 800345e:	4628      	mov	r0, r5
 8003460:	f000 fd2e 	bl	8003ec0 <_fflush_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	d0d9      	beq.n	800341c <__swbuf_r+0x2e>
 8003468:	e7d6      	b.n	8003418 <__swbuf_r+0x2a>
	...

0800346c <__swsetup_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <__swsetup_r+0xa8>)
 8003470:	4605      	mov	r5, r0
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	460c      	mov	r4, r1
 8003476:	b118      	cbz	r0, 8003480 <__swsetup_r+0x14>
 8003478:	6a03      	ldr	r3, [r0, #32]
 800347a:	b90b      	cbnz	r3, 8003480 <__swsetup_r+0x14>
 800347c:	f7ff fec6 	bl	800320c <__sinit>
 8003480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003484:	0719      	lsls	r1, r3, #28
 8003486:	d422      	bmi.n	80034ce <__swsetup_r+0x62>
 8003488:	06da      	lsls	r2, r3, #27
 800348a:	d407      	bmi.n	800349c <__swsetup_r+0x30>
 800348c:	2209      	movs	r2, #9
 800348e:	602a      	str	r2, [r5, #0]
 8003490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	f04f 30ff 	mov.w	r0, #4294967295
 800349a:	e033      	b.n	8003504 <__swsetup_r+0x98>
 800349c:	0758      	lsls	r0, r3, #29
 800349e:	d512      	bpl.n	80034c6 <__swsetup_r+0x5a>
 80034a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034a2:	b141      	cbz	r1, 80034b6 <__swsetup_r+0x4a>
 80034a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034a8:	4299      	cmp	r1, r3
 80034aa:	d002      	beq.n	80034b2 <__swsetup_r+0x46>
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 f8bd 	bl	800362c <_free_r>
 80034b2:	2300      	movs	r3, #0
 80034b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80034bc:	81a3      	strh	r3, [r4, #12]
 80034be:	2300      	movs	r3, #0
 80034c0:	6063      	str	r3, [r4, #4]
 80034c2:	6923      	ldr	r3, [r4, #16]
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	81a3      	strh	r3, [r4, #12]
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	b94b      	cbnz	r3, 80034e6 <__swsetup_r+0x7a>
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034dc:	d003      	beq.n	80034e6 <__swsetup_r+0x7a>
 80034de:	4621      	mov	r1, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 fd3b 	bl	8003f5c <__smakebuf_r>
 80034e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ea:	f013 0201 	ands.w	r2, r3, #1
 80034ee:	d00a      	beq.n	8003506 <__swsetup_r+0x9a>
 80034f0:	2200      	movs	r2, #0
 80034f2:	60a2      	str	r2, [r4, #8]
 80034f4:	6962      	ldr	r2, [r4, #20]
 80034f6:	4252      	negs	r2, r2
 80034f8:	61a2      	str	r2, [r4, #24]
 80034fa:	6922      	ldr	r2, [r4, #16]
 80034fc:	b942      	cbnz	r2, 8003510 <__swsetup_r+0xa4>
 80034fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003502:	d1c5      	bne.n	8003490 <__swsetup_r+0x24>
 8003504:	bd38      	pop	{r3, r4, r5, pc}
 8003506:	0799      	lsls	r1, r3, #30
 8003508:	bf58      	it	pl
 800350a:	6962      	ldrpl	r2, [r4, #20]
 800350c:	60a2      	str	r2, [r4, #8]
 800350e:	e7f4      	b.n	80034fa <__swsetup_r+0x8e>
 8003510:	2000      	movs	r0, #0
 8003512:	e7f7      	b.n	8003504 <__swsetup_r+0x98>
 8003514:	20000020 	.word	0x20000020

08003518 <memset>:
 8003518:	4402      	add	r2, r0
 800351a:	4603      	mov	r3, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <_close_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d06      	ldr	r5, [pc, #24]	@ (8003544 <_close_r+0x1c>)
 800352c:	2300      	movs	r3, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	f7fd fc6d 	bl	8000e12 <_close>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_close_r+0x1a>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_close_r+0x1a>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200001d0 	.word	0x200001d0

08003548 <_lseek_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d07      	ldr	r5, [pc, #28]	@ (8003568 <_lseek_r+0x20>)
 800354c:	4604      	mov	r4, r0
 800354e:	4608      	mov	r0, r1
 8003550:	4611      	mov	r1, r2
 8003552:	2200      	movs	r2, #0
 8003554:	602a      	str	r2, [r5, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7fd fc82 	bl	8000e60 <_lseek>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_lseek_r+0x1e>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_lseek_r+0x1e>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	200001d0 	.word	0x200001d0

0800356c <_read_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	4d07      	ldr	r5, [pc, #28]	@ (800358c <_read_r+0x20>)
 8003570:	4604      	mov	r4, r0
 8003572:	4608      	mov	r0, r1
 8003574:	4611      	mov	r1, r2
 8003576:	2200      	movs	r2, #0
 8003578:	602a      	str	r2, [r5, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f7fd fc2c 	bl	8000dd8 <_read>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_read_r+0x1e>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_read_r+0x1e>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	200001d0 	.word	0x200001d0

08003590 <_write_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4d07      	ldr	r5, [pc, #28]	@ (80035b0 <_write_r+0x20>)
 8003594:	4604      	mov	r4, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	2200      	movs	r2, #0
 800359c:	602a      	str	r2, [r5, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7fd fbc2 	bl	8000d28 <_write>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_write_r+0x1e>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_write_r+0x1e>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	200001d0 	.word	0x200001d0

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	@ (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000020 	.word	0x20000020

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4d0d      	ldr	r5, [pc, #52]	@ (80035f8 <__libc_init_array+0x38>)
 80035c4:	4c0d      	ldr	r4, [pc, #52]	@ (80035fc <__libc_init_array+0x3c>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	2600      	movs	r6, #0
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003600 <__libc_init_array+0x40>)
 80035d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003604 <__libc_init_array+0x44>)
 80035d4:	f000 fd64 	bl	80040a0 <_init>
 80035d8:	1b64      	subs	r4, r4, r5
 80035da:	10a4      	asrs	r4, r4, #2
 80035dc:	2600      	movs	r6, #0
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	080043f0 	.word	0x080043f0
 80035fc:	080043f0 	.word	0x080043f0
 8003600:	080043f0 	.word	0x080043f0
 8003604:	080043f4 	.word	0x080043f4

08003608 <__retarget_lock_init_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_acquire_recursive>:
 800360a:	4770      	bx	lr

0800360c <__retarget_lock_release_recursive>:
 800360c:	4770      	bx	lr

0800360e <memcpy>:
 800360e:	440a      	add	r2, r1
 8003610:	4291      	cmp	r1, r2
 8003612:	f100 33ff 	add.w	r3, r0, #4294967295
 8003616:	d100      	bne.n	800361a <memcpy+0xc>
 8003618:	4770      	bx	lr
 800361a:	b510      	push	{r4, lr}
 800361c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003624:	4291      	cmp	r1, r2
 8003626:	d1f9      	bne.n	800361c <memcpy+0xe>
 8003628:	bd10      	pop	{r4, pc}
	...

0800362c <_free_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4605      	mov	r5, r0
 8003630:	2900      	cmp	r1, #0
 8003632:	d041      	beq.n	80036b8 <_free_r+0x8c>
 8003634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003638:	1f0c      	subs	r4, r1, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	bfb8      	it	lt
 800363e:	18e4      	addlt	r4, r4, r3
 8003640:	f000 f8e0 	bl	8003804 <__malloc_lock>
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <_free_r+0x90>)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	b933      	cbnz	r3, 8003658 <_free_r+0x2c>
 800364a:	6063      	str	r3, [r4, #4]
 800364c:	6014      	str	r4, [r2, #0]
 800364e:	4628      	mov	r0, r5
 8003650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003654:	f000 b8dc 	b.w	8003810 <__malloc_unlock>
 8003658:	42a3      	cmp	r3, r4
 800365a:	d908      	bls.n	800366e <_free_r+0x42>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	1821      	adds	r1, r4, r0
 8003660:	428b      	cmp	r3, r1
 8003662:	bf01      	itttt	eq
 8003664:	6819      	ldreq	r1, [r3, #0]
 8003666:	685b      	ldreq	r3, [r3, #4]
 8003668:	1809      	addeq	r1, r1, r0
 800366a:	6021      	streq	r1, [r4, #0]
 800366c:	e7ed      	b.n	800364a <_free_r+0x1e>
 800366e:	461a      	mov	r2, r3
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b10b      	cbz	r3, 8003678 <_free_r+0x4c>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d9fa      	bls.n	800366e <_free_r+0x42>
 8003678:	6811      	ldr	r1, [r2, #0]
 800367a:	1850      	adds	r0, r2, r1
 800367c:	42a0      	cmp	r0, r4
 800367e:	d10b      	bne.n	8003698 <_free_r+0x6c>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	4401      	add	r1, r0
 8003684:	1850      	adds	r0, r2, r1
 8003686:	4283      	cmp	r3, r0
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	d1e0      	bne.n	800364e <_free_r+0x22>
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	6053      	str	r3, [r2, #4]
 8003692:	4408      	add	r0, r1
 8003694:	6010      	str	r0, [r2, #0]
 8003696:	e7da      	b.n	800364e <_free_r+0x22>
 8003698:	d902      	bls.n	80036a0 <_free_r+0x74>
 800369a:	230c      	movs	r3, #12
 800369c:	602b      	str	r3, [r5, #0]
 800369e:	e7d6      	b.n	800364e <_free_r+0x22>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	1821      	adds	r1, r4, r0
 80036a4:	428b      	cmp	r3, r1
 80036a6:	bf04      	itt	eq
 80036a8:	6819      	ldreq	r1, [r3, #0]
 80036aa:	685b      	ldreq	r3, [r3, #4]
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	bf04      	itt	eq
 80036b0:	1809      	addeq	r1, r1, r0
 80036b2:	6021      	streq	r1, [r4, #0]
 80036b4:	6054      	str	r4, [r2, #4]
 80036b6:	e7ca      	b.n	800364e <_free_r+0x22>
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
 80036ba:	bf00      	nop
 80036bc:	200001dc 	.word	0x200001dc

080036c0 <sbrk_aligned>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003700 <sbrk_aligned+0x40>)
 80036c4:	460c      	mov	r4, r1
 80036c6:	6831      	ldr	r1, [r6, #0]
 80036c8:	4605      	mov	r5, r0
 80036ca:	b911      	cbnz	r1, 80036d2 <sbrk_aligned+0x12>
 80036cc:	f000 fcd8 	bl	8004080 <_sbrk_r>
 80036d0:	6030      	str	r0, [r6, #0]
 80036d2:	4621      	mov	r1, r4
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 fcd3 	bl	8004080 <_sbrk_r>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	d103      	bne.n	80036e6 <sbrk_aligned+0x26>
 80036de:	f04f 34ff 	mov.w	r4, #4294967295
 80036e2:	4620      	mov	r0, r4
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	1cc4      	adds	r4, r0, #3
 80036e8:	f024 0403 	bic.w	r4, r4, #3
 80036ec:	42a0      	cmp	r0, r4
 80036ee:	d0f8      	beq.n	80036e2 <sbrk_aligned+0x22>
 80036f0:	1a21      	subs	r1, r4, r0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f000 fcc4 	bl	8004080 <_sbrk_r>
 80036f8:	3001      	adds	r0, #1
 80036fa:	d1f2      	bne.n	80036e2 <sbrk_aligned+0x22>
 80036fc:	e7ef      	b.n	80036de <sbrk_aligned+0x1e>
 80036fe:	bf00      	nop
 8003700:	200001d8 	.word	0x200001d8

08003704 <_malloc_r>:
 8003704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003708:	1ccd      	adds	r5, r1, #3
 800370a:	f025 0503 	bic.w	r5, r5, #3
 800370e:	3508      	adds	r5, #8
 8003710:	2d0c      	cmp	r5, #12
 8003712:	bf38      	it	cc
 8003714:	250c      	movcc	r5, #12
 8003716:	2d00      	cmp	r5, #0
 8003718:	4606      	mov	r6, r0
 800371a:	db01      	blt.n	8003720 <_malloc_r+0x1c>
 800371c:	42a9      	cmp	r1, r5
 800371e:	d904      	bls.n	800372a <_malloc_r+0x26>
 8003720:	230c      	movs	r3, #12
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	2000      	movs	r0, #0
 8003726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800372a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003800 <_malloc_r+0xfc>
 800372e:	f000 f869 	bl	8003804 <__malloc_lock>
 8003732:	f8d8 3000 	ldr.w	r3, [r8]
 8003736:	461c      	mov	r4, r3
 8003738:	bb44      	cbnz	r4, 800378c <_malloc_r+0x88>
 800373a:	4629      	mov	r1, r5
 800373c:	4630      	mov	r0, r6
 800373e:	f7ff ffbf 	bl	80036c0 <sbrk_aligned>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	4604      	mov	r4, r0
 8003746:	d158      	bne.n	80037fa <_malloc_r+0xf6>
 8003748:	f8d8 4000 	ldr.w	r4, [r8]
 800374c:	4627      	mov	r7, r4
 800374e:	2f00      	cmp	r7, #0
 8003750:	d143      	bne.n	80037da <_malloc_r+0xd6>
 8003752:	2c00      	cmp	r4, #0
 8003754:	d04b      	beq.n	80037ee <_malloc_r+0xea>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	4639      	mov	r1, r7
 800375a:	4630      	mov	r0, r6
 800375c:	eb04 0903 	add.w	r9, r4, r3
 8003760:	f000 fc8e 	bl	8004080 <_sbrk_r>
 8003764:	4581      	cmp	r9, r0
 8003766:	d142      	bne.n	80037ee <_malloc_r+0xea>
 8003768:	6821      	ldr	r1, [r4, #0]
 800376a:	1a6d      	subs	r5, r5, r1
 800376c:	4629      	mov	r1, r5
 800376e:	4630      	mov	r0, r6
 8003770:	f7ff ffa6 	bl	80036c0 <sbrk_aligned>
 8003774:	3001      	adds	r0, #1
 8003776:	d03a      	beq.n	80037ee <_malloc_r+0xea>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	442b      	add	r3, r5
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	f8d8 3000 	ldr.w	r3, [r8]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	bb62      	cbnz	r2, 80037e0 <_malloc_r+0xdc>
 8003786:	f8c8 7000 	str.w	r7, [r8]
 800378a:	e00f      	b.n	80037ac <_malloc_r+0xa8>
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	1b52      	subs	r2, r2, r5
 8003790:	d420      	bmi.n	80037d4 <_malloc_r+0xd0>
 8003792:	2a0b      	cmp	r2, #11
 8003794:	d917      	bls.n	80037c6 <_malloc_r+0xc2>
 8003796:	1961      	adds	r1, r4, r5
 8003798:	42a3      	cmp	r3, r4
 800379a:	6025      	str	r5, [r4, #0]
 800379c:	bf18      	it	ne
 800379e:	6059      	strne	r1, [r3, #4]
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	bf08      	it	eq
 80037a4:	f8c8 1000 	streq.w	r1, [r8]
 80037a8:	5162      	str	r2, [r4, r5]
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	4630      	mov	r0, r6
 80037ae:	f000 f82f 	bl	8003810 <__malloc_unlock>
 80037b2:	f104 000b 	add.w	r0, r4, #11
 80037b6:	1d23      	adds	r3, r4, #4
 80037b8:	f020 0007 	bic.w	r0, r0, #7
 80037bc:	1ac2      	subs	r2, r0, r3
 80037be:	bf1c      	itt	ne
 80037c0:	1a1b      	subne	r3, r3, r0
 80037c2:	50a3      	strne	r3, [r4, r2]
 80037c4:	e7af      	b.n	8003726 <_malloc_r+0x22>
 80037c6:	6862      	ldr	r2, [r4, #4]
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	bf0c      	ite	eq
 80037cc:	f8c8 2000 	streq.w	r2, [r8]
 80037d0:	605a      	strne	r2, [r3, #4]
 80037d2:	e7eb      	b.n	80037ac <_malloc_r+0xa8>
 80037d4:	4623      	mov	r3, r4
 80037d6:	6864      	ldr	r4, [r4, #4]
 80037d8:	e7ae      	b.n	8003738 <_malloc_r+0x34>
 80037da:	463c      	mov	r4, r7
 80037dc:	687f      	ldr	r7, [r7, #4]
 80037de:	e7b6      	b.n	800374e <_malloc_r+0x4a>
 80037e0:	461a      	mov	r2, r3
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d1fb      	bne.n	80037e0 <_malloc_r+0xdc>
 80037e8:	2300      	movs	r3, #0
 80037ea:	6053      	str	r3, [r2, #4]
 80037ec:	e7de      	b.n	80037ac <_malloc_r+0xa8>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	4630      	mov	r0, r6
 80037f4:	f000 f80c 	bl	8003810 <__malloc_unlock>
 80037f8:	e794      	b.n	8003724 <_malloc_r+0x20>
 80037fa:	6005      	str	r5, [r0, #0]
 80037fc:	e7d6      	b.n	80037ac <_malloc_r+0xa8>
 80037fe:	bf00      	nop
 8003800:	200001dc 	.word	0x200001dc

08003804 <__malloc_lock>:
 8003804:	4801      	ldr	r0, [pc, #4]	@ (800380c <__malloc_lock+0x8>)
 8003806:	f7ff bf00 	b.w	800360a <__retarget_lock_acquire_recursive>
 800380a:	bf00      	nop
 800380c:	200001d4 	.word	0x200001d4

08003810 <__malloc_unlock>:
 8003810:	4801      	ldr	r0, [pc, #4]	@ (8003818 <__malloc_unlock+0x8>)
 8003812:	f7ff befb 	b.w	800360c <__retarget_lock_release_recursive>
 8003816:	bf00      	nop
 8003818:	200001d4 	.word	0x200001d4

0800381c <__sfputc_r>:
 800381c:	6893      	ldr	r3, [r2, #8]
 800381e:	3b01      	subs	r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	b410      	push	{r4}
 8003824:	6093      	str	r3, [r2, #8]
 8003826:	da08      	bge.n	800383a <__sfputc_r+0x1e>
 8003828:	6994      	ldr	r4, [r2, #24]
 800382a:	42a3      	cmp	r3, r4
 800382c:	db01      	blt.n	8003832 <__sfputc_r+0x16>
 800382e:	290a      	cmp	r1, #10
 8003830:	d103      	bne.n	800383a <__sfputc_r+0x1e>
 8003832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003836:	f7ff bdda 	b.w	80033ee <__swbuf_r>
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	1c58      	adds	r0, r3, #1
 800383e:	6010      	str	r0, [r2, #0]
 8003840:	7019      	strb	r1, [r3, #0]
 8003842:	4608      	mov	r0, r1
 8003844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003848:	4770      	bx	lr

0800384a <__sfputs_r>:
 800384a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384c:	4606      	mov	r6, r0
 800384e:	460f      	mov	r7, r1
 8003850:	4614      	mov	r4, r2
 8003852:	18d5      	adds	r5, r2, r3
 8003854:	42ac      	cmp	r4, r5
 8003856:	d101      	bne.n	800385c <__sfputs_r+0x12>
 8003858:	2000      	movs	r0, #0
 800385a:	e007      	b.n	800386c <__sfputs_r+0x22>
 800385c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003860:	463a      	mov	r2, r7
 8003862:	4630      	mov	r0, r6
 8003864:	f7ff ffda 	bl	800381c <__sfputc_r>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d1f3      	bne.n	8003854 <__sfputs_r+0xa>
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003870 <_vfiprintf_r>:
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	460d      	mov	r5, r1
 8003876:	b09d      	sub	sp, #116	@ 0x74
 8003878:	4614      	mov	r4, r2
 800387a:	4698      	mov	r8, r3
 800387c:	4606      	mov	r6, r0
 800387e:	b118      	cbz	r0, 8003888 <_vfiprintf_r+0x18>
 8003880:	6a03      	ldr	r3, [r0, #32]
 8003882:	b90b      	cbnz	r3, 8003888 <_vfiprintf_r+0x18>
 8003884:	f7ff fcc2 	bl	800320c <__sinit>
 8003888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800388a:	07d9      	lsls	r1, r3, #31
 800388c:	d405      	bmi.n	800389a <_vfiprintf_r+0x2a>
 800388e:	89ab      	ldrh	r3, [r5, #12]
 8003890:	059a      	lsls	r2, r3, #22
 8003892:	d402      	bmi.n	800389a <_vfiprintf_r+0x2a>
 8003894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003896:	f7ff feb8 	bl	800360a <__retarget_lock_acquire_recursive>
 800389a:	89ab      	ldrh	r3, [r5, #12]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	d501      	bpl.n	80038a4 <_vfiprintf_r+0x34>
 80038a0:	692b      	ldr	r3, [r5, #16]
 80038a2:	b99b      	cbnz	r3, 80038cc <_vfiprintf_r+0x5c>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4630      	mov	r0, r6
 80038a8:	f7ff fde0 	bl	800346c <__swsetup_r>
 80038ac:	b170      	cbz	r0, 80038cc <_vfiprintf_r+0x5c>
 80038ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038b0:	07dc      	lsls	r4, r3, #31
 80038b2:	d504      	bpl.n	80038be <_vfiprintf_r+0x4e>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	b01d      	add	sp, #116	@ 0x74
 80038ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038be:	89ab      	ldrh	r3, [r5, #12]
 80038c0:	0598      	lsls	r0, r3, #22
 80038c2:	d4f7      	bmi.n	80038b4 <_vfiprintf_r+0x44>
 80038c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038c6:	f7ff fea1 	bl	800360c <__retarget_lock_release_recursive>
 80038ca:	e7f3      	b.n	80038b4 <_vfiprintf_r+0x44>
 80038cc:	2300      	movs	r3, #0
 80038ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80038d0:	2320      	movs	r3, #32
 80038d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80038da:	2330      	movs	r3, #48	@ 0x30
 80038dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003a8c <_vfiprintf_r+0x21c>
 80038e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038e4:	f04f 0901 	mov.w	r9, #1
 80038e8:	4623      	mov	r3, r4
 80038ea:	469a      	mov	sl, r3
 80038ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f0:	b10a      	cbz	r2, 80038f6 <_vfiprintf_r+0x86>
 80038f2:	2a25      	cmp	r2, #37	@ 0x25
 80038f4:	d1f9      	bne.n	80038ea <_vfiprintf_r+0x7a>
 80038f6:	ebba 0b04 	subs.w	fp, sl, r4
 80038fa:	d00b      	beq.n	8003914 <_vfiprintf_r+0xa4>
 80038fc:	465b      	mov	r3, fp
 80038fe:	4622      	mov	r2, r4
 8003900:	4629      	mov	r1, r5
 8003902:	4630      	mov	r0, r6
 8003904:	f7ff ffa1 	bl	800384a <__sfputs_r>
 8003908:	3001      	adds	r0, #1
 800390a:	f000 80a7 	beq.w	8003a5c <_vfiprintf_r+0x1ec>
 800390e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003910:	445a      	add	r2, fp
 8003912:	9209      	str	r2, [sp, #36]	@ 0x24
 8003914:	f89a 3000 	ldrb.w	r3, [sl]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 809f 	beq.w	8003a5c <_vfiprintf_r+0x1ec>
 800391e:	2300      	movs	r3, #0
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003928:	f10a 0a01 	add.w	sl, sl, #1
 800392c:	9304      	str	r3, [sp, #16]
 800392e:	9307      	str	r3, [sp, #28]
 8003930:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003934:	931a      	str	r3, [sp, #104]	@ 0x68
 8003936:	4654      	mov	r4, sl
 8003938:	2205      	movs	r2, #5
 800393a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800393e:	4853      	ldr	r0, [pc, #332]	@ (8003a8c <_vfiprintf_r+0x21c>)
 8003940:	f7fc fc1e 	bl	8000180 <memchr>
 8003944:	9a04      	ldr	r2, [sp, #16]
 8003946:	b9d8      	cbnz	r0, 8003980 <_vfiprintf_r+0x110>
 8003948:	06d1      	lsls	r1, r2, #27
 800394a:	bf44      	itt	mi
 800394c:	2320      	movmi	r3, #32
 800394e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003952:	0713      	lsls	r3, r2, #28
 8003954:	bf44      	itt	mi
 8003956:	232b      	movmi	r3, #43	@ 0x2b
 8003958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800395c:	f89a 3000 	ldrb.w	r3, [sl]
 8003960:	2b2a      	cmp	r3, #42	@ 0x2a
 8003962:	d015      	beq.n	8003990 <_vfiprintf_r+0x120>
 8003964:	9a07      	ldr	r2, [sp, #28]
 8003966:	4654      	mov	r4, sl
 8003968:	2000      	movs	r0, #0
 800396a:	f04f 0c0a 	mov.w	ip, #10
 800396e:	4621      	mov	r1, r4
 8003970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003974:	3b30      	subs	r3, #48	@ 0x30
 8003976:	2b09      	cmp	r3, #9
 8003978:	d94b      	bls.n	8003a12 <_vfiprintf_r+0x1a2>
 800397a:	b1b0      	cbz	r0, 80039aa <_vfiprintf_r+0x13a>
 800397c:	9207      	str	r2, [sp, #28]
 800397e:	e014      	b.n	80039aa <_vfiprintf_r+0x13a>
 8003980:	eba0 0308 	sub.w	r3, r0, r8
 8003984:	fa09 f303 	lsl.w	r3, r9, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	9304      	str	r3, [sp, #16]
 800398c:	46a2      	mov	sl, r4
 800398e:	e7d2      	b.n	8003936 <_vfiprintf_r+0xc6>
 8003990:	9b03      	ldr	r3, [sp, #12]
 8003992:	1d19      	adds	r1, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	9103      	str	r1, [sp, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	bfbb      	ittet	lt
 800399c:	425b      	neglt	r3, r3
 800399e:	f042 0202 	orrlt.w	r2, r2, #2
 80039a2:	9307      	strge	r3, [sp, #28]
 80039a4:	9307      	strlt	r3, [sp, #28]
 80039a6:	bfb8      	it	lt
 80039a8:	9204      	strlt	r2, [sp, #16]
 80039aa:	7823      	ldrb	r3, [r4, #0]
 80039ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80039ae:	d10a      	bne.n	80039c6 <_vfiprintf_r+0x156>
 80039b0:	7863      	ldrb	r3, [r4, #1]
 80039b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039b4:	d132      	bne.n	8003a1c <_vfiprintf_r+0x1ac>
 80039b6:	9b03      	ldr	r3, [sp, #12]
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	9203      	str	r2, [sp, #12]
 80039be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039c2:	3402      	adds	r4, #2
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003a9c <_vfiprintf_r+0x22c>
 80039ca:	7821      	ldrb	r1, [r4, #0]
 80039cc:	2203      	movs	r2, #3
 80039ce:	4650      	mov	r0, sl
 80039d0:	f7fc fbd6 	bl	8000180 <memchr>
 80039d4:	b138      	cbz	r0, 80039e6 <_vfiprintf_r+0x176>
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	eba0 000a 	sub.w	r0, r0, sl
 80039dc:	2240      	movs	r2, #64	@ 0x40
 80039de:	4082      	lsls	r2, r0
 80039e0:	4313      	orrs	r3, r2
 80039e2:	3401      	adds	r4, #1
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ea:	4829      	ldr	r0, [pc, #164]	@ (8003a90 <_vfiprintf_r+0x220>)
 80039ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039f0:	2206      	movs	r2, #6
 80039f2:	f7fc fbc5 	bl	8000180 <memchr>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d03f      	beq.n	8003a7a <_vfiprintf_r+0x20a>
 80039fa:	4b26      	ldr	r3, [pc, #152]	@ (8003a94 <_vfiprintf_r+0x224>)
 80039fc:	bb1b      	cbnz	r3, 8003a46 <_vfiprintf_r+0x1d6>
 80039fe:	9b03      	ldr	r3, [sp, #12]
 8003a00:	3307      	adds	r3, #7
 8003a02:	f023 0307 	bic.w	r3, r3, #7
 8003a06:	3308      	adds	r3, #8
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a0c:	443b      	add	r3, r7
 8003a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a10:	e76a      	b.n	80038e8 <_vfiprintf_r+0x78>
 8003a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a16:	460c      	mov	r4, r1
 8003a18:	2001      	movs	r0, #1
 8003a1a:	e7a8      	b.n	800396e <_vfiprintf_r+0xfe>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	3401      	adds	r4, #1
 8003a20:	9305      	str	r3, [sp, #20]
 8003a22:	4619      	mov	r1, r3
 8003a24:	f04f 0c0a 	mov.w	ip, #10
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a2e:	3a30      	subs	r2, #48	@ 0x30
 8003a30:	2a09      	cmp	r2, #9
 8003a32:	d903      	bls.n	8003a3c <_vfiprintf_r+0x1cc>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0c6      	beq.n	80039c6 <_vfiprintf_r+0x156>
 8003a38:	9105      	str	r1, [sp, #20]
 8003a3a:	e7c4      	b.n	80039c6 <_vfiprintf_r+0x156>
 8003a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a40:	4604      	mov	r4, r0
 8003a42:	2301      	movs	r3, #1
 8003a44:	e7f0      	b.n	8003a28 <_vfiprintf_r+0x1b8>
 8003a46:	ab03      	add	r3, sp, #12
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <_vfiprintf_r+0x228>)
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	4630      	mov	r0, r6
 8003a52:	f3af 8000 	nop.w
 8003a56:	4607      	mov	r7, r0
 8003a58:	1c78      	adds	r0, r7, #1
 8003a5a:	d1d6      	bne.n	8003a0a <_vfiprintf_r+0x19a>
 8003a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a5e:	07d9      	lsls	r1, r3, #31
 8003a60:	d405      	bmi.n	8003a6e <_vfiprintf_r+0x1fe>
 8003a62:	89ab      	ldrh	r3, [r5, #12]
 8003a64:	059a      	lsls	r2, r3, #22
 8003a66:	d402      	bmi.n	8003a6e <_vfiprintf_r+0x1fe>
 8003a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a6a:	f7ff fdcf 	bl	800360c <__retarget_lock_release_recursive>
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	f53f af1f 	bmi.w	80038b4 <_vfiprintf_r+0x44>
 8003a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a78:	e71e      	b.n	80038b8 <_vfiprintf_r+0x48>
 8003a7a:	ab03      	add	r3, sp, #12
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462a      	mov	r2, r5
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <_vfiprintf_r+0x228>)
 8003a82:	a904      	add	r1, sp, #16
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 f879 	bl	8003b7c <_printf_i>
 8003a8a:	e7e4      	b.n	8003a56 <_vfiprintf_r+0x1e6>
 8003a8c:	080043b4 	.word	0x080043b4
 8003a90:	080043be 	.word	0x080043be
 8003a94:	00000000 	.word	0x00000000
 8003a98:	0800384b 	.word	0x0800384b
 8003a9c:	080043ba 	.word	0x080043ba

08003aa0 <_printf_common>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	4698      	mov	r8, r3
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfb8      	it	lt
 8003ab4:	4613      	movlt	r3, r2
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003abc:	4607      	mov	r7, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_printf_common+0x26>
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	6833      	ldrmi	r3, [r6, #0]
 8003ace:	3302      	addmi	r3, #2
 8003ad0:	6033      	strmi	r3, [r6, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	f015 0506 	ands.w	r5, r5, #6
 8003ad8:	d106      	bne.n	8003ae8 <_printf_common+0x48>
 8003ada:	f104 0a19 	add.w	sl, r4, #25
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	6832      	ldr	r2, [r6, #0]
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dc26      	bgt.n	8003b36 <_printf_common+0x96>
 8003ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	3b00      	subs	r3, #0
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	0692      	lsls	r2, r2, #26
 8003af6:	d42b      	bmi.n	8003b50 <_printf_common+0xb0>
 8003af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003afc:	4641      	mov	r1, r8
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c8      	blx	r9
 8003b02:	3001      	adds	r0, #1
 8003b04:	d01e      	beq.n	8003b44 <_printf_common+0xa4>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	6922      	ldr	r2, [r4, #16]
 8003b0a:	f003 0306 	and.w	r3, r3, #6
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	bf02      	ittt	eq
 8003b12:	68e5      	ldreq	r5, [r4, #12]
 8003b14:	6833      	ldreq	r3, [r6, #0]
 8003b16:	1aed      	subeq	r5, r5, r3
 8003b18:	68a3      	ldr	r3, [r4, #8]
 8003b1a:	bf0c      	ite	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	2500      	movne	r5, #0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfc4      	itt	gt
 8003b26:	1a9b      	subgt	r3, r3, r2
 8003b28:	18ed      	addgt	r5, r5, r3
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	341a      	adds	r4, #26
 8003b2e:	42b5      	cmp	r5, r6
 8003b30:	d11a      	bne.n	8003b68 <_printf_common+0xc8>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e008      	b.n	8003b48 <_printf_common+0xa8>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c8      	blx	r9
 8003b40:	3001      	adds	r0, #1
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0xac>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7c6      	b.n	8003ade <_printf_common+0x3e>
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	2030      	movs	r0, #48	@ 0x30
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b5a:	4422      	add	r2, r4
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b64:	3302      	adds	r3, #2
 8003b66:	e7c7      	b.n	8003af8 <_printf_common+0x58>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c8      	blx	r9
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0e6      	beq.n	8003b44 <_printf_common+0xa4>
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7d9      	b.n	8003b2e <_printf_common+0x8e>
	...

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	7e0f      	ldrb	r7, [r1, #24]
 8003b82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b84:	2f78      	cmp	r7, #120	@ 0x78
 8003b86:	4691      	mov	r9, r2
 8003b88:	4680      	mov	r8, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	@ 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d1 	beq.w	8003d40 <_printf_i+0x1c4>
 8003b9e:	2f58      	cmp	r7, #88	@ 0x58
 8003ba0:	f000 80b8 	beq.w	8003d14 <_printf_i+0x198>
 8003ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8003bbc <_printf_i+0x40>)
 8003bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d27 	.word	0x08003d27
 8003bec:	08003c53 	.word	0x08003c53
 8003bf0:	08003ce1 	.word	0x08003ce1
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d49 	.word	0x08003d49
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c53 	.word	0x08003c53
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003ce9 	.word	0x08003ce9
 8003c14:	6833      	ldr	r3, [r6, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6032      	str	r2, [r6, #0]
 8003c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e09c      	b.n	8003d62 <_printf_i+0x1e6>
 8003c28:	6833      	ldr	r3, [r6, #0]
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	6031      	str	r1, [r6, #0]
 8003c30:	0606      	lsls	r6, r0, #24
 8003c32:	d501      	bpl.n	8003c38 <_printf_i+0xbc>
 8003c34:	681d      	ldr	r5, [r3, #0]
 8003c36:	e003      	b.n	8003c40 <_printf_i+0xc4>
 8003c38:	0645      	lsls	r5, r0, #25
 8003c3a:	d5fb      	bpl.n	8003c34 <_printf_i+0xb8>
 8003c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	da03      	bge.n	8003c4c <_printf_i+0xd0>
 8003c44:	232d      	movs	r3, #45	@ 0x2d
 8003c46:	426d      	negs	r5, r5
 8003c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c4c:	4858      	ldr	r0, [pc, #352]	@ (8003db0 <_printf_i+0x234>)
 8003c4e:	230a      	movs	r3, #10
 8003c50:	e011      	b.n	8003c76 <_printf_i+0xfa>
 8003c52:	6821      	ldr	r1, [r4, #0]
 8003c54:	6833      	ldr	r3, [r6, #0]
 8003c56:	0608      	lsls	r0, r1, #24
 8003c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c5c:	d402      	bmi.n	8003c64 <_printf_i+0xe8>
 8003c5e:	0649      	lsls	r1, r1, #25
 8003c60:	bf48      	it	mi
 8003c62:	b2ad      	uxthmi	r5, r5
 8003c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c66:	4852      	ldr	r0, [pc, #328]	@ (8003db0 <_printf_i+0x234>)
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	bf14      	ite	ne
 8003c6c:	230a      	movne	r3, #10
 8003c6e:	2308      	moveq	r3, #8
 8003c70:	2100      	movs	r1, #0
 8003c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c76:	6866      	ldr	r6, [r4, #4]
 8003c78:	60a6      	str	r6, [r4, #8]
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	db05      	blt.n	8003c8a <_printf_i+0x10e>
 8003c7e:	6821      	ldr	r1, [r4, #0]
 8003c80:	432e      	orrs	r6, r5
 8003c82:	f021 0104 	bic.w	r1, r1, #4
 8003c86:	6021      	str	r1, [r4, #0]
 8003c88:	d04b      	beq.n	8003d22 <_printf_i+0x1a6>
 8003c8a:	4616      	mov	r6, r2
 8003c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c90:	fb03 5711 	mls	r7, r3, r1, r5
 8003c94:	5dc7      	ldrb	r7, [r0, r7]
 8003c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c9a:	462f      	mov	r7, r5
 8003c9c:	42bb      	cmp	r3, r7
 8003c9e:	460d      	mov	r5, r1
 8003ca0:	d9f4      	bls.n	8003c8c <_printf_i+0x110>
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d10b      	bne.n	8003cbe <_printf_i+0x142>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	07df      	lsls	r7, r3, #31
 8003caa:	d508      	bpl.n	8003cbe <_printf_i+0x142>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	6861      	ldr	r1, [r4, #4]
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	bfde      	ittt	le
 8003cb4:	2330      	movle	r3, #48	@ 0x30
 8003cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cbe:	1b92      	subs	r2, r2, r6
 8003cc0:	6122      	str	r2, [r4, #16]
 8003cc2:	f8cd a000 	str.w	sl, [sp]
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	aa03      	add	r2, sp, #12
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4640      	mov	r0, r8
 8003cce:	f7ff fee7 	bl	8003aa0 <_printf_common>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d14a      	bne.n	8003d6c <_printf_i+0x1f0>
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	b004      	add	sp, #16
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	4832      	ldr	r0, [pc, #200]	@ (8003db4 <_printf_i+0x238>)
 8003cea:	2778      	movs	r7, #120	@ 0x78
 8003cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	6831      	ldr	r1, [r6, #0]
 8003cf4:	061f      	lsls	r7, r3, #24
 8003cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cfa:	d402      	bmi.n	8003d02 <_printf_i+0x186>
 8003cfc:	065f      	lsls	r7, r3, #25
 8003cfe:	bf48      	it	mi
 8003d00:	b2ad      	uxthmi	r5, r5
 8003d02:	6031      	str	r1, [r6, #0]
 8003d04:	07d9      	lsls	r1, r3, #31
 8003d06:	bf44      	itt	mi
 8003d08:	f043 0320 	orrmi.w	r3, r3, #32
 8003d0c:	6023      	strmi	r3, [r4, #0]
 8003d0e:	b11d      	cbz	r5, 8003d18 <_printf_i+0x19c>
 8003d10:	2310      	movs	r3, #16
 8003d12:	e7ad      	b.n	8003c70 <_printf_i+0xf4>
 8003d14:	4826      	ldr	r0, [pc, #152]	@ (8003db0 <_printf_i+0x234>)
 8003d16:	e7e9      	b.n	8003cec <_printf_i+0x170>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f023 0320 	bic.w	r3, r3, #32
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	e7f6      	b.n	8003d10 <_printf_i+0x194>
 8003d22:	4616      	mov	r6, r2
 8003d24:	e7bd      	b.n	8003ca2 <_printf_i+0x126>
 8003d26:	6833      	ldr	r3, [r6, #0]
 8003d28:	6825      	ldr	r5, [r4, #0]
 8003d2a:	6961      	ldr	r1, [r4, #20]
 8003d2c:	1d18      	adds	r0, r3, #4
 8003d2e:	6030      	str	r0, [r6, #0]
 8003d30:	062e      	lsls	r6, r5, #24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	d501      	bpl.n	8003d3a <_printf_i+0x1be>
 8003d36:	6019      	str	r1, [r3, #0]
 8003d38:	e002      	b.n	8003d40 <_printf_i+0x1c4>
 8003d3a:	0668      	lsls	r0, r5, #25
 8003d3c:	d5fb      	bpl.n	8003d36 <_printf_i+0x1ba>
 8003d3e:	8019      	strh	r1, [r3, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	6123      	str	r3, [r4, #16]
 8003d44:	4616      	mov	r6, r2
 8003d46:	e7bc      	b.n	8003cc2 <_printf_i+0x146>
 8003d48:	6833      	ldr	r3, [r6, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	6032      	str	r2, [r6, #0]
 8003d4e:	681e      	ldr	r6, [r3, #0]
 8003d50:	6862      	ldr	r2, [r4, #4]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7fc fa13 	bl	8000180 <memchr>
 8003d5a:	b108      	cbz	r0, 8003d60 <_printf_i+0x1e4>
 8003d5c:	1b80      	subs	r0, r0, r6
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d6a:	e7aa      	b.n	8003cc2 <_printf_i+0x146>
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	4632      	mov	r2, r6
 8003d70:	4649      	mov	r1, r9
 8003d72:	4640      	mov	r0, r8
 8003d74:	47d0      	blx	sl
 8003d76:	3001      	adds	r0, #1
 8003d78:	d0ad      	beq.n	8003cd6 <_printf_i+0x15a>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	079b      	lsls	r3, r3, #30
 8003d7e:	d413      	bmi.n	8003da8 <_printf_i+0x22c>
 8003d80:	68e0      	ldr	r0, [r4, #12]
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	4298      	cmp	r0, r3
 8003d86:	bfb8      	it	lt
 8003d88:	4618      	movlt	r0, r3
 8003d8a:	e7a6      	b.n	8003cda <_printf_i+0x15e>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4649      	mov	r1, r9
 8003d92:	4640      	mov	r0, r8
 8003d94:	47d0      	blx	sl
 8003d96:	3001      	adds	r0, #1
 8003d98:	d09d      	beq.n	8003cd6 <_printf_i+0x15a>
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	68e3      	ldr	r3, [r4, #12]
 8003d9e:	9903      	ldr	r1, [sp, #12]
 8003da0:	1a5b      	subs	r3, r3, r1
 8003da2:	42ab      	cmp	r3, r5
 8003da4:	dcf2      	bgt.n	8003d8c <_printf_i+0x210>
 8003da6:	e7eb      	b.n	8003d80 <_printf_i+0x204>
 8003da8:	2500      	movs	r5, #0
 8003daa:	f104 0619 	add.w	r6, r4, #25
 8003dae:	e7f5      	b.n	8003d9c <_printf_i+0x220>
 8003db0:	080043c5 	.word	0x080043c5
 8003db4:	080043d6 	.word	0x080043d6

08003db8 <__sflush_r>:
 8003db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc0:	0716      	lsls	r6, r2, #28
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	d454      	bmi.n	8003e72 <__sflush_r+0xba>
 8003dc8:	684b      	ldr	r3, [r1, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	dc02      	bgt.n	8003dd4 <__sflush_r+0x1c>
 8003dce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	dd48      	ble.n	8003e66 <__sflush_r+0xae>
 8003dd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d045      	beq.n	8003e66 <__sflush_r+0xae>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003de0:	682f      	ldr	r7, [r5, #0]
 8003de2:	6a21      	ldr	r1, [r4, #32]
 8003de4:	602b      	str	r3, [r5, #0]
 8003de6:	d030      	beq.n	8003e4a <__sflush_r+0x92>
 8003de8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	0759      	lsls	r1, r3, #29
 8003dee:	d505      	bpl.n	8003dfc <__sflush_r+0x44>
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	1ad2      	subs	r2, r2, r3
 8003df4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003df6:	b10b      	cbz	r3, 8003dfc <__sflush_r+0x44>
 8003df8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dfa:	1ad2      	subs	r2, r2, r3
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e00:	6a21      	ldr	r1, [r4, #32]
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b0      	blx	r6
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	d106      	bne.n	8003e1a <__sflush_r+0x62>
 8003e0c:	6829      	ldr	r1, [r5, #0]
 8003e0e:	291d      	cmp	r1, #29
 8003e10:	d82b      	bhi.n	8003e6a <__sflush_r+0xb2>
 8003e12:	4a2a      	ldr	r2, [pc, #168]	@ (8003ebc <__sflush_r+0x104>)
 8003e14:	40ca      	lsrs	r2, r1
 8003e16:	07d6      	lsls	r6, r2, #31
 8003e18:	d527      	bpl.n	8003e6a <__sflush_r+0xb2>
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	6062      	str	r2, [r4, #4]
 8003e1e:	04d9      	lsls	r1, r3, #19
 8003e20:	6922      	ldr	r2, [r4, #16]
 8003e22:	6022      	str	r2, [r4, #0]
 8003e24:	d504      	bpl.n	8003e30 <__sflush_r+0x78>
 8003e26:	1c42      	adds	r2, r0, #1
 8003e28:	d101      	bne.n	8003e2e <__sflush_r+0x76>
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	b903      	cbnz	r3, 8003e30 <__sflush_r+0x78>
 8003e2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e32:	602f      	str	r7, [r5, #0]
 8003e34:	b1b9      	cbz	r1, 8003e66 <__sflush_r+0xae>
 8003e36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e3a:	4299      	cmp	r1, r3
 8003e3c:	d002      	beq.n	8003e44 <__sflush_r+0x8c>
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7ff fbf4 	bl	800362c <_free_r>
 8003e44:	2300      	movs	r3, #0
 8003e46:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e48:	e00d      	b.n	8003e66 <__sflush_r+0xae>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b0      	blx	r6
 8003e50:	4602      	mov	r2, r0
 8003e52:	1c50      	adds	r0, r2, #1
 8003e54:	d1c9      	bne.n	8003dea <__sflush_r+0x32>
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0c6      	beq.n	8003dea <__sflush_r+0x32>
 8003e5c:	2b1d      	cmp	r3, #29
 8003e5e:	d001      	beq.n	8003e64 <__sflush_r+0xac>
 8003e60:	2b16      	cmp	r3, #22
 8003e62:	d11e      	bne.n	8003ea2 <__sflush_r+0xea>
 8003e64:	602f      	str	r7, [r5, #0]
 8003e66:	2000      	movs	r0, #0
 8003e68:	e022      	b.n	8003eb0 <__sflush_r+0xf8>
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	e01b      	b.n	8003eaa <__sflush_r+0xf2>
 8003e72:	690f      	ldr	r7, [r1, #16]
 8003e74:	2f00      	cmp	r7, #0
 8003e76:	d0f6      	beq.n	8003e66 <__sflush_r+0xae>
 8003e78:	0793      	lsls	r3, r2, #30
 8003e7a:	680e      	ldr	r6, [r1, #0]
 8003e7c:	bf08      	it	eq
 8003e7e:	694b      	ldreq	r3, [r1, #20]
 8003e80:	600f      	str	r7, [r1, #0]
 8003e82:	bf18      	it	ne
 8003e84:	2300      	movne	r3, #0
 8003e86:	eba6 0807 	sub.w	r8, r6, r7
 8003e8a:	608b      	str	r3, [r1, #8]
 8003e8c:	f1b8 0f00 	cmp.w	r8, #0
 8003e90:	dde9      	ble.n	8003e66 <__sflush_r+0xae>
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003e96:	4643      	mov	r3, r8
 8003e98:	463a      	mov	r2, r7
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	47b0      	blx	r6
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	dc08      	bgt.n	8003eb4 <__sflush_r+0xfc>
 8003ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb4:	4407      	add	r7, r0
 8003eb6:	eba8 0800 	sub.w	r8, r8, r0
 8003eba:	e7e7      	b.n	8003e8c <__sflush_r+0xd4>
 8003ebc:	20400001 	.word	0x20400001

08003ec0 <_fflush_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	690b      	ldr	r3, [r1, #16]
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	b913      	cbnz	r3, 8003ed0 <_fflush_r+0x10>
 8003eca:	2500      	movs	r5, #0
 8003ecc:	4628      	mov	r0, r5
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	b118      	cbz	r0, 8003eda <_fflush_r+0x1a>
 8003ed2:	6a03      	ldr	r3, [r0, #32]
 8003ed4:	b90b      	cbnz	r3, 8003eda <_fflush_r+0x1a>
 8003ed6:	f7ff f999 	bl	800320c <__sinit>
 8003eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f3      	beq.n	8003eca <_fflush_r+0xa>
 8003ee2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ee4:	07d0      	lsls	r0, r2, #31
 8003ee6:	d404      	bmi.n	8003ef2 <_fflush_r+0x32>
 8003ee8:	0599      	lsls	r1, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_fflush_r+0x32>
 8003eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eee:	f7ff fb8c 	bl	800360a <__retarget_lock_acquire_recursive>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f7ff ff5f 	bl	8003db8 <__sflush_r>
 8003efa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003efc:	07da      	lsls	r2, r3, #31
 8003efe:	4605      	mov	r5, r0
 8003f00:	d4e4      	bmi.n	8003ecc <_fflush_r+0xc>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	059b      	lsls	r3, r3, #22
 8003f06:	d4e1      	bmi.n	8003ecc <_fflush_r+0xc>
 8003f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f0a:	f7ff fb7f 	bl	800360c <__retarget_lock_release_recursive>
 8003f0e:	e7dd      	b.n	8003ecc <_fflush_r+0xc>

08003f10 <__swhatbuf_r>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460c      	mov	r4, r1
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	b096      	sub	sp, #88	@ 0x58
 8003f1c:	4615      	mov	r5, r2
 8003f1e:	461e      	mov	r6, r3
 8003f20:	da0d      	bge.n	8003f3e <__swhatbuf_r+0x2e>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2340      	movne	r3, #64	@ 0x40
 8003f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f34:	2000      	movs	r0, #0
 8003f36:	6031      	str	r1, [r6, #0]
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	b016      	add	sp, #88	@ 0x58
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f000 f87c 	bl	800403c <_fstat_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	dbec      	blt.n	8003f22 <__swhatbuf_r+0x12>
 8003f48:	9901      	ldr	r1, [sp, #4]
 8003f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f52:	4259      	negs	r1, r3
 8003f54:	4159      	adcs	r1, r3
 8003f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5a:	e7eb      	b.n	8003f34 <__swhatbuf_r+0x24>

08003f5c <__smakebuf_r>:
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f60:	079d      	lsls	r5, r3, #30
 8003f62:	4606      	mov	r6, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	d507      	bpl.n	8003f78 <__smakebuf_r+0x1c>
 8003f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	2301      	movs	r3, #1
 8003f72:	6163      	str	r3, [r4, #20]
 8003f74:	b003      	add	sp, #12
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f78:	ab01      	add	r3, sp, #4
 8003f7a:	466a      	mov	r2, sp
 8003f7c:	f7ff ffc8 	bl	8003f10 <__swhatbuf_r>
 8003f80:	9f00      	ldr	r7, [sp, #0]
 8003f82:	4605      	mov	r5, r0
 8003f84:	4639      	mov	r1, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fbbc 	bl	8003704 <_malloc_r>
 8003f8c:	b948      	cbnz	r0, 8003fa2 <__smakebuf_r+0x46>
 8003f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f92:	059a      	lsls	r2, r3, #22
 8003f94:	d4ee      	bmi.n	8003f74 <__smakebuf_r+0x18>
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	e7e2      	b.n	8003f68 <__smakebuf_r+0xc>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	6020      	str	r0, [r4, #0]
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	9b01      	ldr	r3, [sp, #4]
 8003fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003fb2:	b15b      	cbz	r3, 8003fcc <__smakebuf_r+0x70>
 8003fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f851 	bl	8004060 <_isatty_r>
 8003fbe:	b128      	cbz	r0, 8003fcc <__smakebuf_r+0x70>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	431d      	orrs	r5, r3
 8003fd0:	81a5      	strh	r5, [r4, #12]
 8003fd2:	e7cf      	b.n	8003f74 <__smakebuf_r+0x18>

08003fd4 <_putc_r>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	4606      	mov	r6, r0
 8003fdc:	b118      	cbz	r0, 8003fe6 <_putc_r+0x12>
 8003fde:	6a03      	ldr	r3, [r0, #32]
 8003fe0:	b90b      	cbnz	r3, 8003fe6 <_putc_r+0x12>
 8003fe2:	f7ff f913 	bl	800320c <__sinit>
 8003fe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fe8:	07d8      	lsls	r0, r3, #31
 8003fea:	d405      	bmi.n	8003ff8 <_putc_r+0x24>
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	0599      	lsls	r1, r3, #22
 8003ff0:	d402      	bmi.n	8003ff8 <_putc_r+0x24>
 8003ff2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff4:	f7ff fb09 	bl	800360a <__retarget_lock_acquire_recursive>
 8003ff8:	68a3      	ldr	r3, [r4, #8]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	da05      	bge.n	800400e <_putc_r+0x3a>
 8004002:	69a2      	ldr	r2, [r4, #24]
 8004004:	4293      	cmp	r3, r2
 8004006:	db12      	blt.n	800402e <_putc_r+0x5a>
 8004008:	b2eb      	uxtb	r3, r5
 800400a:	2b0a      	cmp	r3, #10
 800400c:	d00f      	beq.n	800402e <_putc_r+0x5a>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	6022      	str	r2, [r4, #0]
 8004014:	701d      	strb	r5, [r3, #0]
 8004016:	b2ed      	uxtb	r5, r5
 8004018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800401a:	07da      	lsls	r2, r3, #31
 800401c:	d405      	bmi.n	800402a <_putc_r+0x56>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	059b      	lsls	r3, r3, #22
 8004022:	d402      	bmi.n	800402a <_putc_r+0x56>
 8004024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004026:	f7ff faf1 	bl	800360c <__retarget_lock_release_recursive>
 800402a:	4628      	mov	r0, r5
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	4629      	mov	r1, r5
 8004030:	4622      	mov	r2, r4
 8004032:	4630      	mov	r0, r6
 8004034:	f7ff f9db 	bl	80033ee <__swbuf_r>
 8004038:	4605      	mov	r5, r0
 800403a:	e7ed      	b.n	8004018 <_putc_r+0x44>

0800403c <_fstat_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d07      	ldr	r5, [pc, #28]	@ (800405c <_fstat_r+0x20>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	f7fc feee 	bl	8000e2a <_fstat>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	d102      	bne.n	8004058 <_fstat_r+0x1c>
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	b103      	cbz	r3, 8004058 <_fstat_r+0x1c>
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	bd38      	pop	{r3, r4, r5, pc}
 800405a:	bf00      	nop
 800405c:	200001d0 	.word	0x200001d0

08004060 <_isatty_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d06      	ldr	r5, [pc, #24]	@ (800407c <_isatty_r+0x1c>)
 8004064:	2300      	movs	r3, #0
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	f7fc feed 	bl	8000e4a <_isatty>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_isatty_r+0x1a>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_isatty_r+0x1a>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200001d0 	.word	0x200001d0

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	@ (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fef6 	bl	8000e7c <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200001d0 	.word	0x200001d0

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
